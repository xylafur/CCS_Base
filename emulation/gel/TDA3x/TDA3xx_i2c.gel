/********************************************************************************************************/
/* This GEL file is loaded on the command line of Code Composer                                         */
/* The StartUp() function is called every time you start                                                */
/* Code Composer.  You can customize this function to                                                   */
/* initialize wait states or to perform other initialization.                                           */
/*                                                                                                      */
/* File       :TDA3xx_i2c.gel                                                                           */
/* Description:I2C utilities to configure the board-level pinmux to connect EMU pins to trace connector */
/* Revision history                                                                                     */
/* ==================================================================================================== */
/* Version   Date          Change from previous version                                                 */
/* ==================================================================================================== */
/* 0.1       14-Nov'14     First Draft                                                                  */
/* ==================================================================================================== */
/********************************************************************************************************/

/*********************************************************************************************************
*
*  DEFINITIONS
*
********************************************************************************************************/

#define WR_MEM_32(addr, data)   *(unsigned int*)(addr) =(unsigned int)(data)
#define RD_MEM_32(addr)         *(unsigned int*)(addr)
#define uint32_t                unsigned int

#define DEBUG_PRINT      (0)


/* PMIC Definitions */
#define PMIC_PR_SLAVE_ADDR          0x58     // Slave address to set power rails
#define PMIC_MPU_REG_ADDR           0x23     // Register address to set MPU power rails
#define PMIC_DSPEVE_REG_ADDR        0x2B     // Register address to set DSPEVE power rails
#define PMIC_GPU_REG_ADDR           0x2F     // Register address to set GPU power rails
#define PMIC_CORE_REG_ADDR          0x33     // Register address to set CORE power rails
#define PMIC_IVA_REG_ADDR           0x37     // Register address to set IVA power rails
#define PMIC_ID_SLAVE_ADDR          0x59     // Slave address to read ID
#define PMIC_ID_REG_ADDR            0x02     // Register address to read ID

#define CM_L4PER_I2C1_CLKCTRL       (RD_MEM_32(L4PER_CM_CORE + 0x00A0))
#define CM_L4PER_I2C3_CLKCTRL       (RD_MEM_32(L4PER_CM_CORE + 0x00B0))
#define CM_CLKSEL_CLKOUT2           (RD_MEM_32(0x4AE06160))

/* I2C Definitions */
#define I2C_1_BASE                  0x48070000
#define I2C_SYSC(I2C_BASE)          RD_MEM_32(I2C_BASE + 0x0010)
#define I2C_IRQ_RAW(I2C_BASE)       RD_MEM_32(I2C_BASE + 0x0024)
#define I2C_IRQ_STATUS(I2C_BASE)    RD_MEM_32(I2C_BASE + 0x0028)
#define I2C_IRQE_SET(I2C_BASE)      RD_MEM_32(I2C_BASE + 0x002C)
#define I2C_BUF(I2C_BASE)           RD_MEM_32(I2C_BASE + 0x0094)
#define I2C_CNT(I2C_BASE)           RD_MEM_32(I2C_BASE + 0x0098)
#define I2C_DATA(I2C_BASE)          RD_MEM_32(I2C_BASE + 0x009C)
#define I2C_CON(I2C_BASE)           RD_MEM_32(I2C_BASE + 0x00A4)
#define I2C_0A(I2C_BASE)            RD_MEM_32(I2C_BASE + 0x00A8)
#define I2C_SA(I2C_BASE)            RD_MEM_32(I2C_BASE + 0x00AC)
#define I2C_PSC(I2C_BASE)           RD_MEM_32(I2C_BASE + 0x00B0)
#define I2C_SCLL(I2C_BASE)          RD_MEM_32(I2C_BASE + 0x00B4)
#define I2C_SCLH(I2C_BASE)          RD_MEM_32(I2C_BASE + 0x00B8)
#define I2C_SYSTEST(I2C_BASE)       RD_MEM_32(I2C_BASE + 0x00BC)
#define I2C_0A1(I2C_BASE)           RD_MEM_32(I2C_BASE + 0x00C4)


/**********************************************************************
*
*  FUNCTIONS
*
**********************************************************************/

/******************************************************************************
* configure_i2c_controller_module() : Init the I2C Controller Module
*****************************************************************************/
configure_i2c_controller_module()
{
    if(DEBUG_PRINT)
    GEL_TextOut("--->>> I2C Init <<<---\n");

    //I2C clock management
    I2C_SYSC(I2C_1_BASE)        = 0x0003;  // I2C Soft Reset
    //CM_CLKSEL_CLKOUT2         = 0x0007;  // Enabling clock into I2C Master Controller
    //CM_L4PER_I2C1_CLKCTRL     = 0x0002;

    //Setting bit rates
    I2C_PSC(I2C_1_BASE)         = 0x0009;  // Maximum Fast Mode (400 kbps)
    I2C_SCLL(I2C_1_BASE)        = 0x0007;
    I2C_SCLH(I2C_1_BASE)        = 0x0005;

    //I2C configuration
    I2C_0A(I2C_1_BASE)          = 0x00AA;  // Setting I2C own address
    I2C_SYSC(I2C_1_BASE)        = 0x030C;
    I2C_CON(I2C_1_BASE)        |= 0x8000;  // I2C module out of reset
    I2C_SYSTEST(I2C_1_BASE)    |= 0x4000;  // Set clock to free running
    I2C_CON(I2C_1_BASE)         = 0x8600;  // Set to master transmitter

}

#define TCA6424CNTL_INP0      0x00
#define TCA6424CNTL_INP1      0x01
#define TCA6424CNTL_INP2      0x02
#define TCA6424CNTL_OUTP0     0x04
#define TCA6424CNTL_OUTP1     0x05
#define TCA6424CNTL_OUTP2     0x06
#define TCA6424CNTL_POLARITY0 0x08
#define TCA6424CNTL_POLARITY1 0x09
#define TCA6424CNTL_POLARITY2 0x0A
#define TCA6424CNTL_CONFIG0   0x0C
#define TCA6424CNTL_CONFIG1   0x0D
#define TCA6424CNTL_CONFIG2   0x0E

#define TCA6416CNTL_INP0        0x00
#define TCA6416CNTL_INP1        0x01
#define TCA6416CNTL_OUTP0       0x02
#define TCA6416CNTL_OUTP1       0x03
#define TCA6416CNTL_POLARITY0   0x04
#define TCA6416CNTL_POLARITY1   0x05
#define TCA6416CNTL_CONFIG0     0x06
#define TCA6416CNTL_CONFIG1     0x07

#define TCA64_IN                0x01
#define TCA64_OUT               0x00

#define EXP1_SLAVE_ADDR_1       0x20
#define EXP2_SLAVE_ADDR_1       0x22
#define EXP3_SLAVE_ADDR_1       0x23

#define EXP1_OUT_CONFIG0        0xFF
#define EXP1_OUT_CONFIG1        0xF7

#define EXP2_OUT_CONFIG0        0x00  // Led and vout/vin resets
#define EXP2_OUT_CONFIG1        0xF3  // Eth0/1
#define EXP2_OUT_CONFIG2        0xFF

#define EXP3_OUT_CONFIG0        0x00
#define EXP3_OUT_CONFIG1        0x00
#define EXP3_OUT_CONFIG2        0x00

#define DEFAULT_EXP1_PORT0      0xFF
#define DEFAULT_EXP1_PORT1      0xFF

#define DEFAULT_EXP2_PORT0      0xFF
#define DEFAULT_EXP2_PORT1      0xFF
#define DEFAULT_EXP2_PORT2      0xFF

#define DEFAULT_EXP3_PORT0      0x5B
#define DEFAULT_EMUZ_EXP3_PORT0 0x41
#define DEFAULT_EXP3_PORT1      0xC0
#define DEFAULT_EXP3_PORT2      0xFF

int  Exp1_Port0 = DEFAULT_EXP1_PORT0;
int  Exp1_Port1 = DEFAULT_EXP1_PORT1;

int  Exp2_Port0 = DEFAULT_EXP2_PORT0;
int  Exp2_Port1 = DEFAULT_EXP2_PORT1;
int  Exp2_Port2 = DEFAULT_EXP2_PORT2;

int  Exp3_Port0 = DEFAULT_EXP3_PORT0;
int  Exp3_Port1 = DEFAULT_EXP3_PORT1;
int  Exp3_Port2 = DEFAULT_EXP3_PORT2;

#define I2C_DELAY 100


TCA64_WriteReg(int SlaveAddr, int RegAddr, int RegData)
{
    int j;

    I2C_SA  (I2C_1_BASE)        = SlaveAddr;  // Set to specific address to set power rails
    I2C_CNT(I2C_1_BASE)         = 0x0002;     // Set the Buffer Length
    I2C_IRQ_STATUS(I2C_1_BASE)  = 0xFFFF;     // Clear Current Interrupts
    I2C_CON (I2C_1_BASE)        = 0x8603;     // Send START bit
    I2C_DATA (I2C_1_BASE)       = RegAddr;    // Send register address
    I2C_DATA (I2C_1_BASE)       = RegData;    // Send data
    I2C_IRQ_STATUS(I2C_1_BASE)  = 0x0010;

    for(j=0; j<I2C_DELAY; j++){}
}

setExp1_Defaults()
{
    Exp1_Port0 = DEFAULT_EXP1_PORT0;
    Exp1_Port1 = DEFAULT_EXP1_PORT1;

    // Set the register
    TCA64_WriteReg(  EXP1_SLAVE_ADDR_1, TCA6416CNTL_OUTP0  , Exp1_Port0);
    TCA64_WriteReg(  EXP1_SLAVE_ADDR_1, TCA6416CNTL_OUTP1  , Exp1_Port1);
    TCA64_WriteReg(  EXP1_SLAVE_ADDR_1, TCA6416CNTL_CONFIG0, EXP1_OUT_CONFIG0);
    TCA64_WriteReg(  EXP1_SLAVE_ADDR_1, TCA6416CNTL_CONFIG1, EXP1_OUT_CONFIG1);
}

setExp2_Defaults()
{
    Exp2_Port0 = DEFAULT_EXP2_PORT0;
    Exp2_Port1 = DEFAULT_EXP2_PORT1;
    Exp2_Port2 = DEFAULT_EXP2_PORT2;

    // Set the register
    TCA64_WriteReg( EXP2_SLAVE_ADDR_1, TCA6424CNTL_OUTP0  , Exp2_Port0);
    TCA64_WriteReg( EXP2_SLAVE_ADDR_1, TCA6424CNTL_OUTP1  , Exp2_Port1);
    TCA64_WriteReg( EXP2_SLAVE_ADDR_1, TCA6424CNTL_OUTP2  , Exp2_Port2);

    TCA64_WriteReg( EXP2_SLAVE_ADDR_1, TCA6424CNTL_CONFIG0, EXP2_OUT_CONFIG0);
    TCA64_WriteReg( EXP2_SLAVE_ADDR_1, TCA6424CNTL_CONFIG1, EXP2_OUT_CONFIG1);
    TCA64_WriteReg( EXP2_SLAVE_ADDR_1, TCA6424CNTL_CONFIG2, EXP2_OUT_CONFIG2);
}

setExp3_Defaults()
{
    Exp3_Port0 = DEFAULT_EXP3_PORT0;
    Exp3_Port1 = DEFAULT_EXP3_PORT1;
    Exp3_Port2 = DEFAULT_EXP3_PORT2;

    TCA64_WriteReg( EXP3_SLAVE_ADDR_1, TCA6424CNTL_OUTP0  , Exp3_Port0);
    TCA64_WriteReg( EXP3_SLAVE_ADDR_1, TCA6424CNTL_OUTP1  , Exp3_Port1);
    TCA64_WriteReg( EXP3_SLAVE_ADDR_1, TCA6424CNTL_OUTP2  , Exp3_Port2);

    TCA64_WriteReg( EXP3_SLAVE_ADDR_1, TCA6424CNTL_CONFIG0, EXP3_OUT_CONFIG0);
    TCA64_WriteReg( EXP3_SLAVE_ADDR_1, TCA6424CNTL_CONFIG1, EXP3_OUT_CONFIG1);
    TCA64_WriteReg( EXP3_SLAVE_ADDR_1, TCA6424CNTL_CONFIG2, EXP3_OUT_CONFIG2);
}

#define LED_DELAY 10000
test_Leds()
{
    int i;
    int j;
    TCA64_WriteReg( EXP2_SLAVE_ADDR_1, TCA6424CNTL_OUTP0,   0xFF );
    TCA64_WriteReg( EXP2_SLAVE_ADDR_1, TCA6424CNTL_CONFIG0, 0xF0 );

    Exp3_Port0 &= 0xf0;
    TCA64_WriteReg( EXP2_SLAVE_ADDR_1,TCA6424CNTL_OUTP0,Exp3_Port0 );
    for(i=0; i<5; i++ ){
        Exp3_Port0 &= 0xf0;
        TCA64_WriteReg( EXP2_SLAVE_ADDR_1,TCA6424CNTL_OUTP0,Exp3_Port0 );
        for(j=0; j<LED_DELAY; j++){}

        Exp3_Port0 |= 0x1;
        TCA64_WriteReg( EXP2_SLAVE_ADDR_1,TCA6424CNTL_OUTP0,Exp3_Port0 );
        for(j=0; j<LED_DELAY; j++){}

        Exp3_Port0 |= 0x2;
        TCA64_WriteReg( EXP2_SLAVE_ADDR_1,TCA6424CNTL_OUTP0,Exp3_Port0 );
        for(j=0; j<LED_DELAY; j++){}

        Exp3_Port0 |= 0x4;
        TCA64_WriteReg( EXP2_SLAVE_ADDR_1,TCA6424CNTL_OUTP0,Exp3_Port0 );
        for(j=0; j<LED_DELAY; j++){}

        Exp3_Port0 |= 0x8;
        TCA64_WriteReg( EXP2_SLAVE_ADDR_1,TCA6424CNTL_OUTP0,Exp3_Port0 );
        for(j=0; j<LED_DELAY; j++){}

    }
    TCA64_WriteReg( EXP2_SLAVE_ADDR_1,TCA6424CNTL_OUTP0,0x0 );
}

/**********************************************************************
*
*  MENU ITEMS
*
**********************************************************************/

menuitem "TDA3x EVM I2C EXPANDER CONTROL"
TDA3xx_I2C_Controller_Init()
{
    GEL_TextOut("Enabling I2C EXPANDER Control... \n");
    configure_i2c_controller_module();
}

TDA3xx_set_Defaults()
{
    GEL_TextOut("Setting I2C EXPANDER to Default... \n");
    setExp1_Defaults();
    setExp2_Defaults();
    setExp3_Defaults();
}
TDA3xx_setExp1_Defaults()
{
    setExp1_Defaults();
}

TDA3xx_setExp2_Defaults()
{
    setExp2_Defaults();
}

TDA3xx_setExp3_Defaults()
{
    setExp3_Defaults();
}

TDA3xx_TestLeds()
{
    GEL_TextOut("Configuring I2C Controller Module... \n");
    configure_i2c_controller_module();
    test_Leds();
}

TDA3xx_EnableTrace()
{
    GEL_TextOut("Enabling Pin Trace... \n");
    configure_i2c_controller_module();
    Exp3_Port0 =  DEFAULT_EMUZ_EXP3_PORT0;
    TCA64_WriteReg( EXP3_SLAVE_ADDR_1, TCA6424CNTL_OUTP0  , Exp3_Port0);
}

hotmenu Enable_Trace_Pins()
{
    TDA3xx_I2C_Controller_Init();
    TDA3xx_set_Defaults();
    TDA3xx_TestLeds();
    TDA3xx_EnableTrace();
    GEL_TextOut("Pin Trace Enabled! \n");
}

hotmenu Enable_VPP_for_Efuse_programming()
{
    TDA3xx_I2C_Controller_Init();
    // Set the register
    TCA64_WriteReg(  EXP1_SLAVE_ADDR_1, TCA6416CNTL_OUTP1  , (Exp1_Port1 & ~0x1));
    TCA64_WriteReg(  EXP1_SLAVE_ADDR_1, TCA6416CNTL_CONFIG1, (EXP1_OUT_CONFIG1 & ~0x1));
    GEL_TextOut("VPP Enabled for EFUSE programming! \n");
    GEL_TextOut("Set SW8001[7] to ON to enable VPP \n");
}



