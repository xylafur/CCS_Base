/*******************************************************************/ 
/* This GEL file is loaded on the command line of Code Composer    */
/* The StartUp() function is called every time you start           */
/* Code Composer.  You can customize this function to              */
/* initialize wait states or to perform other initialization.      */
/*                                                                 */
/* OMAP4460 cortexA9 reset config  		     					   */
/*                                                                 */
/*                                                                 */
/*  Author: Salamito thomas				     					   */
/*******************************************************************/
menuitem "Basic Emulation"
/**********************************************************************
 *
 *  FUNCTIONS
 *
 **********************************************************************/
//hotmenu load_asm_program_sram()
//{
//	GEL_TextOut("Load asm program in internal ram \n");
//	*(short *)0x55020000 = 0xBF00;
//	*(short *)0x55020002 = 0xBF00;
//	*(short *)0x55020004 = 0xBF00;
//	*(short *)0x55020006 = 0xBF00;
//	*(short *)0x55020008 = 0xBF00;
//	*(short *)0x5502000A = 0xBF00;
//	*(short *)0x5502000C = 0xBF00;
//	*(short *)0x5502000E = 0xBF00;
//	*(short *)0x55020010 = 0xBF00;
//	*(short *)0x55020012 = 0xBF00;
//	*(short *)0x55020014 = 0xE7F4;

//	PC = 0x55020000;
//}

hotmenu load_asm_program_sram1()
{
	GEL_TextOut("Load asm program in internal ram \n");
	*(short *)0x00001000 = 0xBF00;
	*(short *)0x00001002 = 0xBF00;
	*(short *)0x00001004 = 0xBF00;
	*(short *)0x00001006 = 0xBF00;
	*(short *)0x00001008 = 0xBF00;
	*(short *)0x0000100A = 0xBF00;
	*(short *)0x0000100C = 0xBF00;
	*(short *)0x0000100E = 0xBF00;
	*(short *)0x00001010 = 0xBF00;
	*(short *)0x00001012 = 0xBF00;
	*(short *)0x00001014 = 0xE7F4;

	PC = 0x00000800;
}

hotmenu load_asm_program_sram2()
{
	GEL_TextOut("Load asm program in internal ram \n");
	*(short *)0x00000A00 = 0xBF00;
	*(short *)0x00000A02 = 0xBF00;
	*(short *)0x00000A04 = 0xBF00;
	*(short *)0x00000A06 = 0xBF00;
	*(short *)0x00000A08 = 0xBF00;
	*(short *)0x00000A0A = 0xBF00;
	*(short *)0x00000A0C = 0xBF00;
	*(short *)0x00000A0E = 0xBF00;
	*(short *)0x00000A10 = 0xBF00;
	*(short *)0x00000A12 = 0xBF00;
	*(short *)0x00000A14 = 0xE7F4;

	PC = 0x00000A00;
}


hotmenu basic_asm_execution_control_sram1()
{
	GEL_BreakPtReset(); // clears all SW bkpt.
	GEL_HWBreakPtReset(); // clears all HW bkpt.
	GEL_BreakPtAdd(0x00001008);
	GEL_Run();
	//GEL_TextOut("basic_asm_execution_control_sram_bkpt %x\n", PC);
}

hotmenu basic_asm_execution_control_sram2()
{
	GEL_BreakPtReset(); // clears all SW bkpt.
	GEL_HWBreakPtReset(); // clears all HW bkpt.
	GEL_BreakPtAdd(0x00000A08);
	GEL_Run();
	//GEL_TextOut("basic_asm_execution_control_sram_bkpt %x\n", PC);
}
