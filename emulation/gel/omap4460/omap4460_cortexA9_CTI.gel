/*******************************************************************/ 
/* This GEL file is loaded on the command line of Code Composer    */
/* The StartUp() function is called every time you start           */
/* Code Composer.  You can customize this function to              */
/* initialize wait states or to perform other initialization.      */
/*                                                                 */
/* OMAP4460 prcm clock config   		     					   */
/*                                                                 */
/*                                                                 */
/*  Author: Salamito thomas				     					   */
/*******************************************************************/

/**********************************************************************
 *
 *  DEFINITIONS
 *
 **********************************************************************/
#define CTI0_BASE        0x54148000
#define CTI1_BASE        0x54149000


#define UNLOCK_VALUE    0xC5ACCE55

#define CTINEN(CTI_BASE_ADDRESS) *(unsigned int *)(CTI_BASE_ADDRESS + 0x20)
#define CTIOUTEN0(CTI_BASE_ADDRESS) *(unsigned int *)(CTI_BASE_ADDRESS + 0xA0)
#define CTI_Control(CTI_BASE_ADDRESS) *(unsigned int *)(CTI_BASE_ADDRESS + 0x0)
#define LOCK_ACCESS_REG(CTI_BASE_ADDRESS) *(unsigned int *)(CTI_BASE_ADDRESS + 0xFB0)
#define LOCK_ACCESS_STATUS_REG(CTI_BASE_ADDRESS) *(unsigned int *)(CTI_BASE_ADDRESS + 0xFB4)


/**********************************************************************
 *
 *  FUNCTIONS
 *
 **********************************************************************/
menuitem "CTI config"

hotmenu CTI0_config()
{
/* Use Channel 0 to map trigger out and trigger in for DBGACK */
/* and EDBGREQ respectively */

GEL_TextOut("--->>> enter CTI0_config <<<---\n");

/* Write to Lock Access Register at offset 0xFB0 the keycode 0xC5ACCE55 */
LOCK_ACCESS_REG(CTI0_BASE) = UNLOCK_VALUE;

/* Check Lock status register at 0xFB4 that software lock has been disabled */
while (((LOCK_ACCESS_STATUS_REG(CTI0_BASE))&0x3)==0x3);

/* CTINEN (Offset 0x20): Set bit 0 to enable trigger out on channel0 which maps to DBGACK [ output trigger ]*/
CTINEN(CTI0_BASE) = 0x1;
 
/*CTIOUTEN0 (Offset 0xa0): Set bit 0 to enable halt event from DBGREQ [input trigger] */
CTIOUTEN0(CTI0_BASE) = 0x1;

/*CTI_Control (offset 0x0) = 0x1 (globally enable the module) */
CTI_Control(CTI0_BASE) = 0x1;

GEL_TextOut("--->>> exit CTI0_config <<<---\n");
}

hotmenu CTI1_config()
{
/* Use Channel 0 to map trigger out and trigger in for DBGACK */
/* and EDBGREQ respectively */

GEL_TextOut("--->>> enter CTI1_config <<<---\n");

/* Write to Lock Access Register at offset 0xFB0 the keycode 0xC5ACCE55 */
LOCK_ACCESS_REG(CTI1_BASE) = UNLOCK_VALUE;

/* Check Lock status register at 0xFB4 that software lock has been disabled */
while (LOCK_ACCESS_STATUS_REG(CTI1_BASE)==0x3);

/* CTINEN (Offset 0x20): Set bit 0 to enable trigger out on channel0 which maps to DBGACK [ output trigger ]*/
CTINEN(CTI1_BASE) = 0x1;
 
/*CTIOUTEN0 (Offset 0xa0): Set bit 0 to enable halt event from DBGREQ [input trigger] */
CTIOUTEN0(CTI1_BASE) = 0x1;

/*CTI_Control (offset 0x0) = 0x1 (globally enable the module) */
CTI_Control(CTI1_BASE) = 0x1;

GEL_TextOut("--->>> exit CTI1_config <<<---\n");
}
