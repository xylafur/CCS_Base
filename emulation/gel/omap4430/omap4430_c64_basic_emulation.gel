/*******************************************************************/ 
/* This GEL file is loaded on the command line of Code Composer    */
/* The StartUp() function is called every time you start           */
/* Code Composer.  You can customize this function to              */
/* initialize wait states or to perform other initialization.      */
/*                                                                 */
/* Attila C64 basic emulation          config  		     		   */
/*                                                                 */
/*                                                                 */
/*  Author: Salamito thomas				     		*/
/*******************************************************************/
menuitem "Basic Emulation"
/**********************************************************************
 *
 *  FUNCTIONS
 *
 **********************************************************************/
hotmenu load_asm_program_ddr1()
{
	GEL_TextOut("Load asm program in ddr \n");
	*(int *)0x88000800 = 0x0;
	*(int *)0x88000804 = 0x0;
	*(int *)0x88000808 = 0x0;
	*(int *)0x8800080C = 0x0;
	*(int *)0x88000810 = 0x0;
	*(int *)0x88000814 = 0x0;
	*(int *)0x88000818 = 0x0;
	*(int *)0x8800081C = 0x0;
	*(int *)0x88000820 = 0x0;
	*(int *)0x88000824 = 0x0;
	*(int *)0x88000828 = 0x0FFFFE12;
	*(int *)0x8800082C = 0x0;
	*(int *)0x88000830 = 0x0;
	*(int *)0x88000834 = 0x0;
	*(int *)0x88000838 = 0x0;
	*(int *)0x8800083C = 0x0;
	*(int *)0x88000840 = 0x0;
	*(int *)0x88000844 = 0x0;
	*(int *)0x88000848 = 0x0;
	*(int *)0x8800084C = 0x0;
	*(int *)0x88000850 = 0x0;

	PC = 0x88000800;
}

hotmenu load_asm_program_ddr2()
{
	GEL_TextOut("Load asm program in ddr \n");
	*(int *)0x88000A00 = 0x0;
	*(int *)0x88000A04 = 0x0;
	*(int *)0x88000A08 = 0x0;
	*(int *)0x88000A0C = 0x0;
	*(int *)0x88000A10 = 0x0;
	*(int *)0x88000A14 = 0x0;
	*(int *)0x88000A18 = 0x0;
	*(int *)0x88000A1C = 0x0;
	*(int *)0x88000A20 = 0x0;
	*(int *)0x88000A24 = 0x0;
	*(int *)0x88000A28 = 0x0FFFFE12;
	*(int *)0x88000A2C = 0x0;
	*(int *)0x88000A30 = 0x0;
	*(int *)0x88000A34 = 0x0;
	*(int *)0x88000A38 = 0x0;
	*(int *)0x88000A3C = 0x0;
	*(int *)0x88000A40 = 0x0;
	*(int *)0x88000A44 = 0x0;
	*(int *)0x88000A48 = 0x0;
	*(int *)0x88000A4C = 0x0;
	*(int *)0x88000A50 = 0x0;

	PC = 0x88000A00;
}

hotmenu basic_asm_execution_control_ddr1()
{
	GEL_BreakPtReset(); // clears all SW bkpt.
	GEL_HWBreakPtReset(); // clears all HW bkpt.
	GEL_BreakPtAdd(0x88000818);
	GEL_Run();
	//GEL_TextOut("basic_asm_execution_control_sram_bkpt %x\n", PC);
}

hotmenu basic_asm_execution_control_ddr2()
{
	GEL_BreakPtReset(); // clears all SW bkpt.
	GEL_HWBreakPtReset(); // clears all HW bkpt.
	GEL_BreakPtAdd(0x88000A18);
	GEL_Run();
	//GEL_TextOut("basic_asm_execution_control_sram_bkpt %x\n", PC);
}

