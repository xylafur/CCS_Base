/*******************************************************************/ 
/* This GEL file is loaded on the command line of Code Composer    */
/* The StartUp() function is called every time you start           */
/* Code Composer.  You can customize this function to              */
/* initialize wait states or to perform other initialization.      */
/*                                                                 */
/* OMAP4430 cortexA9 reset config  		     					   */
/*                                                                 */
/*                                                                 */
/*  Author: Salamito thomas				     					   */
/*******************************************************************/
menuitem "Basic Emulation"
/**********************************************************************
 *
 *  FUNCTIONS
 *
 **********************************************************************/
hotmenu load_asm_program_ddr1()
{
	GEL_TextOut("Load asm program in ddr \n");
	*(int *)0x80000200 = 0xE1A00000;
	*(int *)0x80000204 = 0xE1A00000;
	*(int *)0x80000208 = 0xE1A00000;
	*(int *)0x8000020C = 0xE1A00000;
	*(int *)0x80000210 = 0xE1A00000;
	*(int *)0x80000214 = 0xE1A00000;
	*(int *)0x80000218 = 0xE1A00000;
	*(int *)0x8000021C = 0xE1A00000;
	*(int *)0x80000220 = 0xE1A00000;
	*(int *)0x80000224 = 0xEAFFFFF6;

	PC = 0x80000200;
}

hotmenu load_asm_program_ddr2()
{
	GEL_TextOut("Load asm program in ddr \n");
	*(int *)0x80000400 = 0xE1A00000;
	*(int *)0x80000404 = 0xE1A00000;
	*(int *)0x80000408 = 0xE1A00000;
	*(int *)0x8000040C = 0xE1A00000;
	*(int *)0x80000410 = 0xE1A00000;
	*(int *)0x80000414 = 0xE1A00000;
	*(int *)0x80000418 = 0xE1A00000;
	*(int *)0x8000041C = 0xE1A00000;
	*(int *)0x80000420 = 0xE1A00000;
	*(int *)0x80000424 = 0xEAFFFFF6;

	PC = 0x80000400;
}

hotmenu load_asm_program_ocmram1()
{
	GEL_TextOut("Load asm program in ocmram \n");
	*(int *)0x40300800 = 0xE1A00000;
	*(int *)0x40300804 = 0xE1A00000;
	*(int *)0x40300808 = 0xE1A00000;
	*(int *)0x4030080C = 0xE1A00000;
	*(int *)0x40300810 = 0xE1A00000;
	*(int *)0x40300814 = 0xE1A00000;
	*(int *)0x40300818 = 0xE1A00000;
	*(int *)0x4030081C = 0xE1A00000;
	*(int *)0x40300820 = 0xE1A00000;
	*(int *)0x40300824 = 0xEAFFFFF6;

	PC = 0x40300800;
}

hotmenu load_asm_program_ocmram2()
{
	GEL_TextOut("Load asm program in ocmram \n");
	*(int *)0x40300A00 = 0xE1A00000;
	*(int *)0x40300A04 = 0xE1A00000;
	*(int *)0x40300A08 = 0xE1A00000;
	*(int *)0x40300A0C = 0xE1A00000;
	*(int *)0x40300A10 = 0xE1A00000;
	*(int *)0x40300A14 = 0xE1A00000;
	*(int *)0x40300A18 = 0xE1A00000;
	*(int *)0x40300A1C = 0xE1A00000;
	*(int *)0x40300A20 = 0xE1A00000;
	*(int *)0x40300A24 = 0xEAFFFFF6;

	PC = 0x40300A00;
}

hotmenu basic_asm_execution_control_ddr1()
{
	GEL_BreakPtReset(); // clears all SW bkpt.
	GEL_HWBreakPtReset(); // clears all HW bkpt.
	GEL_BreakPtAdd(0x80000210);
	GEL_Run();
	//GEL_TextOut("basic_asm_execution_control_sram_bkpt %x\n", PC);
}

hotmenu basic_asm_execution_control_ddr2()
{
	GEL_BreakPtReset(); // clears all SW bkpt.
	GEL_HWBreakPtReset(); // clears all HW bkpt.
	GEL_BreakPtAdd(0x80000410);
	GEL_Run();
	//GEL_TextOut("basic_asm_execution_control_sram_bkpt %x\n", PC);
}

hotmenu basic_asm_execution_control_ocmram1()
{
	GEL_BreakPtReset(); // clears all SW bkpt.
	GEL_HWBreakPtReset(); // clears all HW bkpt.
	GEL_BreakPtAdd(0x40300810);
	GEL_Run();
	//GEL_TextOut("basic_asm_execution_control_sram_bkpt %x\n", PC);
}

hotmenu basic_asm_execution_control_ocmram2()
{
	GEL_BreakPtReset(); // clears all SW bkpt.
	GEL_HWBreakPtReset(); // clears all HW bkpt.
	GEL_BreakPtAdd(0x40300A10);
	GEL_Run();
	//GEL_TextOut("basic_asm_execution_control_sram_bkpt %x\n", PC);
}
