/*******************************************************************/ 
/* This GEL file is loaded on the command line of Code Composer    */
/* The StartUp() function is called every time you start           */
/* Code Composer.  You can customize this function to              */
/* initialize wait states or to perform other initialization.      */
/*                                                                 */
/* OMAP5430 startup common    		     						   */
/*                                                                 */
/*                                                                 */
/*  Author: Salamito thomas				     					   */
/*******************************************************************/

//#define INFO_PRINT								1

// OPP definitions
#define OPP_BOOT    0
#define	OPP_LOW		1
#define	OPP_NOM		2
#define OPP_OD      3
#define OPP_HIGH    4
#define OPP_SB      5
#define OPP_LOW_ABE 6 
#define OPP_ZEBU    7
#define OPP_WAKEUP_DDR_532 8
#define OPP_WAKEUP_DDR_400 9
#define OPP_WAKEUP_DDR_266 10

#define OMAP5430_CHIP 0
#define OMAP5432_CHIP 1

int current_sysclock=3; 

int device_version;

OnTargetConnect()
{ 
//    omap5430_startup_sequence();
//  DC:  Added GELLO load
    GEL_LoadGel("$(GEL_file_dir)//GELLO.gel");
// and execute the GEL'd version of MLO
    GELLO();
    GEL_TextOut("--->>> omap5430_startup_sequence DONE !!!!!  <<<---\n");
}

onResetDetected()
{
    GEL_TextOut("--->>> System Reset detected <<<---\n");
}

OnReset()
{
    	int device_type;
    	int silicon_type;
    
    	int ID_CODE	  = *(int*)0x4A002204;
    
    	silicon_type = (ID_CODE & 0xF0000000) >> 28;
    
    	GEL_TextOut("--->>> Reset occurs <<<---\n");
    
    	device_type = *(int*)0x4A002134;
    
	    if (((device_type & 0x1C0)>>6) == 0x3)
        {
            GEL_TextOut("--->>> GP device <<<---\n");
      
        if (silicon_type == 0)
        {
            // ES1.0 OR NON FUSED DEVICE  
            PC=0x38000;
        }
        else
        { 
            GEL_TextOut("--->>> !!! UNKNOWN DEVICE !!! <<<---\n");
            PC=0x38000;
        }   
      			            
		    CPSR=0x193; 
	    }
    
    	if (((device_type & 0x1C0) >> 8) == 0x1)
    	{ 
       	    GEL_TextOut("--->>> EMU device <<<---\n");
        	CPSR=0x1D3; 
    	}

    	if (((device_type & 0x1C0) >> 8) == 0x0)
    	{ 
        	GEL_TextOut("--->>> TEST device <<<---\n");
        	CPSR=0x1D3; 
    	}
}

omap5430_startup_sequence()
{  	
    int reg;
    
    int ID_CODE	  = *(int*)0x4A002204;
    int STATUS	  = *(int*)0x4A002134;
    
    int silicon_type;
    int device_type;
        
    int memory_type = 0;
    int memory_tech = 0 ;
    int memory_size = 0;
    
    char palmas_value;
    
    omap54xx_detection();
        

	GEL_TextOut("--->>> startup_sequence <<<---\n");
    	
	silicon_type = (ID_CODE & 0xF0000000) >> 28;
  
    device_type = (STATUS & 0x1C0)>>6;

	
   if (silicon_type == 0)
   {
       if (device_type == 0)
       {      
           GEL_TextOut("--->>> ES 1.0 Device or NON fused device <<<---\n");
       }
       else
       {
           GEL_TextOut("--->>> ES 1.0 Device <<<---\n");
       }   
   }
   else
   {
       GEL_TextOut("--->>> !!!! UNKNOWN DEVICE (%x), PLEASE UPDATE GEL FILES !!!! <<<---\n",,,,,silicon_type);
   }   
    	
  if (device_type == 0x3)
    { 
        GEL_TextOut("--->>> GP device <<<---\n");          
    }
    
    if (device_type == 0x2)
    { 
        GEL_TextOut("--->>> HS device <<<---\n"); 
    }
    
  	if (device_type == 0x1)
    { 
        GEL_TextOut("--->>> EMU device <<<---\n"); 
    }
    
    if (device_type == 0x0)
    { 
        GEL_TextOut("--->>> TEST or NON FUSED device <<<---\n"); 
    }           
    
   	/* Disable Watchdog timer WDT2 */
   	Watchdog_disable();
    
    /******************* TEST I2C1 access to PALMAS ************/
   //omap5430_PALMAS_Init();
   //PALMAS_I2C_Write8(PALMAS_I2C_SLAVE_ADDRESS, 0x5D, 0xF); 
   //PALMAS_I2C_Write8(PALMAS_I2C_SLAVE_ADDRESS, 0x5C, 0x5);	
   //palmas_value = PALMAS_I2C_Read8(PALMAS_I2C_SLAVE_ADDRESS, 0x5C, palmas_value);
   //GEL_TextOut("--->>> palmas_value (%x) <<<---\n",,,,,palmas_value);
   /******************* TEST I2C1 access to PALMAS ************/
    
  
    /* Reconfigure GPMC pads */
    reconfigure_gpmc();
    
    if (device_version == 0x0)
    {
   	 
        /*****************************************/
        /*********** ZEBU CONF OMAP5430***********/
        /*****************************************/  
        /* Setup ddr config for Zebu */ 
        //GEL_TextOut("--->>> !!!!! ZEBU CONFIGURATION !!!!! <<<---\n"); 
        //ddr_config_top(OPP_NOM, ZEBU);                         	   	     
        //opp_default_config_board_OPP_ZEBU();    
        //opp_default_config_board_OPP_NOM_38_4();
        /*****************************************/
        /*******************************************************/
        /*********** WAKEUP 5430 CONF CONF DDR 532**************/
        /*******************************************************/ 
	if (current_sysclock==1) {
        /* Setup sys.clk for Silicon */  
        /* Setup ddr config for WakeUp Elpida 4x4 */ 
          GEL_TextOut("--->>> !!!!! OPP_WAKEUP_DDR_532 WITH ELPIDA_EDBA164B1PB1DF CONFIGURATION !!!!! <<<---\n"); 
          ddr_config_top(OPP_WAKEUP_DDR_532, ELPIDA_EDBA164B1PB1DF);
          opp_default_config_board_WAKEUP_38_4_DDR_532();
          /*******************************************************/
	}
	if (current_sysclock==2) {
        /* Setup sys.clk for Silicon */  
        /* Setup ddr config for WakeUp Elpida 4x4 */ 
          GEL_TextOut("--->>> !!!!! OPP_WAKEUP_DDR_532 WITH ELPIDA_EDBA164B1PB1DF CONFIGURATION !!!!! <<<---\n"); 
          ddr_config_top(OPP_WAKEUP_DDR_532, ELPIDA_EDBA164B1PB1DF);
          opp_default_config_board_WAKEUP_26_DDR_532();
          /*******************************************************/
	}
	if (current_sysclock==3) {
        /* Setup sys.clk for Silicon */  
        /* Setup ddr config for WakeUp Elpida 4x4 */ 
          GEL_TextOut("--->>> !!!!! OPP_WAKEUP_DDR_532 WITH ELPIDA_EDBA164B1PB1DF CONFIGURATION !!!!! <<<---\n"); 
          ddr_config_top(OPP_WAKEUP_DDR_532, ELPIDA_EDBA164B1PB1DF);
          /* Setup ddr config for WakeUp Samsung 4x4 */ 
          //GEL_TextOut("--->>> !!!!! OPP_WAKEUP_DDR_532 WITH SAMSUNG_K3PE0E000B_XGC2 CONFIGURATION !!!!! <<<---\n");    
          //ddr_config_top(OPP_WAKEUP_DDR_532, SAMSUNG_K3PE0E000B_XGC2);                     	   	     
          /* setup OPP config OPP_WAKEUP with DDR 532 */    
          opp_default_config_board_WAKEUP_19_2_DDR_532();
          /*******************************************************/
	}
    
        /*******************************************************/
        /*********** WAKEUP 5430 CONF CONF DDR 400**************/
        /*******************************************************/ 
        /* Setup sys.clk for Silicon */  
        /* Setup ddr config for WakeUp Elpida 4x4 */ 
        //GEL_TextOut("--->>> !!!!! OPP_WAKEUP_DDR_400 WITH ELPIDA_EDBA164B1PB1DF CONFIGURATION !!!!! <<<---\n"); 
        //ddr_config_top(OPP_WAKEUP_DDR_400, ELPIDA_EDBA164B1PB1DF);
        /* Setup ddr config for WakeUp Samsung 4x4 */    
        //GEL_TextOut("--->>> !!!!! OPP_WAKEUP_DDR_400 WITH SAMSUNG_K3PE0E000B_XGC2 CONFIGURATION !!!!! <<<---\n");    
        //ddr_config_top(OPP_WAKEUP_DDR_400, SAMSUNG_K3PE0E000B_XGC2);                     	   	     
        /* setup OPP config OPP_WAKEUP with DDR 266 */    
        //opp_default_config_board_WAKEUP_19_2_DDR_400();
        /*******************************************************/
    
        /*******************************************************/
        /*********** WAKEUP 5430 CONF CONF DDR 266**************/
        /*******************************************************/ 
        /* Setup sys.clk for Silicon */  
        /* Setup ddr config for WakeUp Elpida 4x4 */ 
        //GEL_TextOut("--->>> !!!!! OPP_WAKEUP_DDR_266 WITH ELPIDA_EDBA164B1PB1DF CONFIGURATION !!!!! <<<---\n"); 
        //ddr_config_top(OPP_WAKEUP_DDR_266, ELPIDA_EDBA164B1PB1DF);
        /* Setup ddr config for WakeUp Samsung 4x4 */    
        //GEL_TextOut("--->>> !!!!! OPP_WAKEUP_DDR_266 WITH SAMSUNG_K3PE0E000B_XGC2 CONFIGURATION !!!!! <<<---\n");    
        // ddr_config_top(OPP_WAKEUP_DDR_266, SAMSUNG_K3PE0E000B_XGC2);                     	   	     
        /* setup OPP config OPP_WAKEUP with DDR 266 */    
        //opp_default_config_board_WAKEUP_19_2_DDR_266();
        /*******************************************************/
   }
   else
   {
        
        
        /************************************************************/
        /*********** DEBUG CONF NTEB DDR3 levelling 532 *************/
        /************************************************************/ 
        /* Setup sys.clk for Silicon */
        /* Setup ddr config for WakeUp DDR3 */  
        //GEL_TextOut("--->>> !!!!!DDR3 NTEB levelling 532 !!!!! <<<---\n"); 
		//ddr_config_top(OPP_NOM,DDR3_LVL_NTEB_532);         
        /* setup OPP config OPP_WAKEUP with DDR3 532 */    
	    //opp_default_config_board_WAKEUP_19_2_DDR_532();
        //ddr3_sival_leveling(); 
        /*******************************************************/ 
        /************************************************************/
        /*********** DEBUG CONF SEVM DDR3 levelling 532 *************/
        /************************************************************/ 
        /* Setup sys.clk for Silicon */
        /* Setup ddr config for WakeUp DDR3 */  
        //GEL_TextOut("--->>> !!!!!DDR3 SEVM levelling 532 !!!!! <<<---\n"); 
        //ddr_config_top(OPP_NOM,DDR3_LVL_SEVM_532);         
        /* setup OPP config OPP_WAKEUP with DDR3 532 */    
	    //opp_default_config_board_WAKEUP_19_2_DDR_532();
        //ddr3_sival_leveling(); 
        /************************************************************/
        /*********** DEBUG CONF UEVM DDR3 levelling 532 *************/
        /************************************************************/ 
        /* Setup sys.clk for Silicon */
        /* Setup ddr config for WakeUp DDR3 */  
        //GEL_TextOut("--->>> !!!!!DDR3 uEVM levelling 532 !!!!! <<<---\n"); 
 		//ddr_config_top(OPP_NOM,DDR3_LVL_NTEB_532);         
        /* setup OPP config OPP_WAKEUP with DDR3 532 */    
	    //opp_default_config_board_WAKEUP_19_2_DDR_532();
        //ddr3_sival_leveling();
		/*******************************************************/ 
        /*******************************************************/
        /*********** ZEBU OPP NOM 5432 CONF CONF DDR3*********/
        /*******************************************************/ 
        /* Setup sys.clk for Silicon */
        /* Setup ddr config for ZEBU DDR3 */  
        //GEL_TextOut("--->>> !!!!! ZEBU OPP_NOM_DDR3_533 CONFIGURATION !!!!! <<<---\n"); 
        //ddr_config_top(OPP_NOM, DDR3_ZEBU);
            
        /* setup OPP config OPP_NOM with DDR3 ZEBU */    
        //opp_default_config_board_OPP_NOM_19_2();
        /*******************************************************/
    }    
   
	reg = REG_TZ_SECURE;
  
    if (reg == 0)
    {
        GEL_TextOut("The core is in non-SECURE state. \n");
    }
    else
    {
        GEL_TextOut("The core is in SECURE state!\n");
    }
}

omap54xx_detection()
{
    /* STD_FUSE_CONF.STD_FUSE_EMIF1_DDR3_LPDDR2N */
    int ID_CODE	  = *(int*)0x4AE0C13C;

    device_version = (ID_CODE & 0x00040000) >> 18;
    
    if (device_version == 0x0)
    {
        GEL_TextOut("--->>> !!!!! DEVICE IS OMAP5430 !!!!! <<<---\n");
    }
    else
    {
        GEL_TextOut("--->>> !!!!! DEVICE IS OMAP5432 !!!!! <<<---\n");
    }
}    
    
         
	
reconfigure_gpmc()
{
    int value;
    int device_type;
    int STATUS	  = *(int*)0x4A002134;
      
    GEL_TextOut("Reconfigure PSRAM for accessing \n");
    
    device_type = (STATUS & 0x1C0)>>6;
        
    //*(int*) 0x50000060 = 0x1200;
      
    //*(int*) 0x50000078 = 0xF48; 
     
    //*(int*) 0x4A002858 = 0x01040104; 
       
    //*(int*) 0x4A00285c = 0x01040104; 
    //*(int*) 0x4A002860 = 0x01040104; 
    //*(int*) 0x4A002864 = 0x01040104; 
    //*(int*) 0x4A002868 = 0x01040104; 
    //*(int*) 0x4A00286c = 0x01040104; 
    //*(int*) 0x4A002870 = 0x01040104; 
    //*(int*) 0x4A002874 = 0x01040104; 
    //*(int*) 0x4A002878 = 0x01040104; 
     

    /* GPMC PSRAM Configuration to access all 26 bits of Address */
    
   
    *(int*) 0x4A002858 = 0x03040305; /* PAD0_GPMC_NBE1 */
    *(int*) 0x4A00287c = 0x010C010C; /* PAD0_GPMC_A16_PAD1_GPMC_A17 */
    *(int*) 0x4A002880 = 0x010C010C; /* PAD0_GPMC_A18_PAD1_GPMC_A19 */
    *(int*) 0x4A002884 = 0x010C010C; /* PAD0_GPMC_A20_PAD1_GPMC_A21 */
    *(int*) 0x4A002888 = 0x010C010C; /* PAD0_GPMC_A22_PAD1_GPMC_A23 */
	// *(int*) 0x4A00288C = 0x01040104; /* PAD0_GPMC_NCS0_PAD1_GPMC_WAIT0 */
	
	/* CONFIGURE GPMC to support OPP100 on L3 */
 // value=*(int*)0x50000050;
  //*(int*) 0x50000050 = value | 0x2;    
  *(int*) 0x50000060 = 0x00001210;
  //*(int*) 0x50000064 = 0x00101001;
  //*(int*) 0x50000068 = 0x22060514; 
  //*(int*) 0x5000006C = 0x10057016;	
  //*(int*) 0x50000070 = 0x010F1111; 
  //*(int*) 0x50000074 = 0x8F070000;
  //*(int*) 0x50000078 = 0x00000F41; 
  
  if (device_type == 0x3)
    { 
        // mapped gpmc cs0 : @0x800:0000
        
         GEL_TextOut("GP device Reconfigure PSRAM for accessing CS @0x800:0000 \n");
         
        *(int*) 0x50000078 = 0x00000F48;
    }

   
}    

menuitem "utils"

hotmenu Enter_Non_Secure_Mode()
{
    int reg;
    GEL_TextOut("--->>> Enter Non secure Mode <<<---\n");

    REG_TZ_SECURE = 0;
    reg = REG_TZ_SECURE;
  
    if (reg == 0)
    {
         GEL_TextOut("The core is in non-SECURE state. \n");
    }
    else
    {
      GEL_TextOut("The core is still in SECURE state!\n");
    }
}

hotmenu Enter_Secure_Mode()
{
    int reg;
    GEL_TextOut("--->>> Enter secure Mode <<<---\n");

    REG_TZ_SECURE = 1;
    reg = REG_TZ_SECURE;
  
    if (reg == 0)
    {
         GEL_TextOut("The core is still in non-SECURE state. \n");
    }
    else
    {
      GEL_TextOut("The core is in SECURE state!\n");
    }
}

hotmenu Watchdog_disable()
{
    if (INFO_PRINT) {
	    GEL_TextOut("--->>> Start WDT2 Watchdog Timer is disabled <<<---\n");
	}
	 
    /* Enable clock */
    *(int*)0x4AE07830 = 0x02;

    /* Check that module is Idle */
    while (((*(int *)0x4AE07830) & 0x20000));
       
    /* Disable  watchdog 2 */
    /* Wait until reset complete */
    while (!((*(int *)0x4AE14014) & 0x01));

    /* Disable watchdog timer */
    *(int*)0x4AE14048 = 0x0000AAAA;

    while (((*(int *)0x4AE14034) & 0x10));

    /* Disable 32Khz watchdog timer */
    *(int*)0x4AE14048 = 0x00005555;

    while (((*(int *)0x4AE14034) & 0x10));

    if (INFO_PRINT) {
        GEL_TextOut("--->>> End WDT2 Watchdog Timer is disabled <<<---\n");
    }

}

hotmenu Secure_Watchdog_disable()
{
if (INFO_PRINT) {
	GEL_TextOut("--->>> Start Secure Watchdog Timer is disabled <<<---\n");
	}
	
   /* Disable watchdog timer */
   *(int*)0x4AE22048 = 0x0000AAAA;

   while (((*(int *)0x4A322034) & 0x10));

   /* Disable 32Khz watchdog timer */
   *(int*)0x4AE22048 = 0x00005555;

   //while (((*(int *)0x4AE22034) & 0x10));

   if (INFO_PRINT) {
   GEL_TextOut("--->>> End Secure Watchdog Timer is disabled <<<---\n");
   }
}

setMainSysClock(int n)
{
   current_sysclock=n;	
}
