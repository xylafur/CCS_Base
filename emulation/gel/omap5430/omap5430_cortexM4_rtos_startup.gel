/*******************************************************************/ 
/* This GEL file is loaded on the command line of Code Composer    */
/* The StartUp() function is called every time you start           */
/* Code Composer.  You can customize this function to              */
/* initialize wait states or to perform other initialization.      */
/*                                                                 */
/*          Cortex M4 RTOS			     						   */
/*                                                                 */
/*                                                                 */
/*  Author: Salamito thomas				     					   */
/*******************************************************************/
StartUp()
{
  GEL_MapOff();
  GEL_MapReset();
  memorymap_init();
  GEL_MapOn();

  GEL_LoadGel("$(GEL_file_dir)//omap5430_cortexM4_basic_emulation.gel");
  GEL_LoadGel("$(GEL_file_dir)//omap5430_cortexM4_reset.gel");
  GEL_LoadGel("$(GEL_file_dir)//omap5430_cortexM4_cross_triggering.gel");

  
 

  
}

memorymap_init()
{
    /* 64-bit OCP Master Port */
    GEL_MapAddStr(0x00000000, 0, 0x00004000, "R|W|AS4", 0); 	/* Boot space - 16KBytes */
    GEL_MapAddStr(0x00004000, 0, 0x54FFC000, "R|W|AS4", 0); 	/* L3 space - 1.5GBytes */
    
    
    /* Private memory map */
    GEL_MapAddStr(0x55000000, 0, 0x00004000, "R|W|AS4", 0);  	/* ROM - 16KBytes */
    GEL_MapAddStr(0x55020000, 0, 0x00010000, "R|W|AS4", 0);  	/* RAM - 64KBytes */
    GEL_MapAddStr(0x55040000, 0, 0x00020000, "R|W|AS4", 0);  	/* ISP5 - 128KBytes */
    GEL_MapAddStr(0x55060000, 0, 0x00020000, "R|W|AS4", 0);  	/* SIMCOP - 128KBytes */
    GEL_MapAddStr(0x55080000, 0, 0x00001000, "R|W|AS4", 0);  	/* Unicache MMU - 4KBytes */
    GEL_MapAddStr(0x55081000, 0, 0x00001000, "R|W|AS4", 0); 	/* Local PRCM register- 4KBytes */
    
    GEL_MapAddStr(0x55082000, 0, 0x00001000, "R|W|AS4", 0); 	/* L2 MMU- 4KBytes */
    
    GEL_MapAddStr(0x56000000, 0, 0x0A000000, "R|W|AS4", 0); 	/* L3 main space - 160MBytes */
    
    /* Bit band mapping */
    //GEL_MapAddStr(0x20000000, 0, 0x00100000, "R|W|AS4", 0); 	/* Bit band region 1- 1MBytes */
    //GEL_MapAddStr(0x22000000, 0, 0x02000000, "R|W|AS4", 0); 	/* Bit band alias 1- 32MBytes */
    //GEL_MapAddStr(0x40000000, 0, 0x00100000, "R|W|AS4", 0); 	/* Bit band region 2- 1MBytes */
    // GEL_MapAddStr(0x42000000, 0, 0x02000000, "R|W|AS4", 0); 	/* Bit band alias 2- 32MBytes */
    
    /* 64-bit OCP Master Port */
    GEL_MapAddStr(0x60000000, 0, 0x20000000, "R|W|AS4", 0); 	/* Tiler space - 512MBytes */
    GEL_MapAddStr(0x80000000, 0, 0x60000000, "R|W|AS4", 0); 	/* EMIF - 1.5GBytes */
    
    /* Private peripheral map (different view from each cortexM3 */
    GEL_MapAddStr(0xE0001000, 0, 0x00001000, "R|W|AS4", 0); 	/* DWT- 4KBytes */
    GEL_MapAddStr(0xE0002000, 0, 0x00001000, "R|W|AS4", 0); 	/* FPB- 4KBytes */
    GEL_MapAddStr(0xE000E000, 0, 0x00001000, "R|W|AS4", 0); 	/* NVIC- 4KBytes */
    GEL_MapAddStr(0xE0042000, 0, 0x00001000, "R|W|AS4", 0); 	/* IceCrusher Space- 4KBytes */
    GEL_MapAddStr(0xE00FE000, 0, 0x00001000, "R|W|AS4", 0); 	/* RW table- 4KBytes */
    GEL_MapAddStr(0xE00FF000, 0, 0x00001000, "R|W|AS4", 0); 	/* ROM table- 4KBytes */
    
    GEL_MapAddStr(0xE0100000, 0, 0x1FF00000, "R|W|AS4", 0); 	/* Access to LPDDR2 SDRAMs */
    
    
        
}

hotmenu Read_MMU()
{
    GEL_TextOut("--->>> Read MMU Cortex M4 RTOS<<<---\n");
    
    GEL_TextOut("--->>> 0x40000860 -> (%x)<<<---\n",,,,,*(int*)0x40000860 );
    
    GEL_TextOut("--->>> 0x400008A0 -> (%x)<<<---\n",,,,,*(int*)0x400008A0 );
    
    GEL_TextOut("--->>> 0x400008E0 -> (%x)<<<---\n",,,,,*(int*)0x400008E0 );
    
    GEL_TextOut("--->>> 0x40000800 -> (%x)<<<---\n",,,,,*(int*)0x40000800 );
    
    GEL_TextOut("--->>> 0x40000804 -> (%x)<<<---\n",,,,,*(int*)0x40000804 );
    
    GEL_TextOut("--->>> 0x40000808 -> (%x)<<<---\n",,,,,*(int*)0x40000808 );
    
    GEL_TextOut("--->>> 0x4000080C -> (%x)<<<---\n",,,,,*(int*)0x4000080C );
    
    GEL_TextOut("--->>> 0x40000820 -> (%x)<<<---\n",,,,,*(int*)0x40000820 );
    
    GEL_TextOut("--->>> 0x40000824 -> (%x)<<<---\n",,,,,*(int*)0x40000824 );
    
    GEL_TextOut("--->>> 0x40000828 -> (%x)<<<---\n",,,,,*(int*)0x40000828 );
    
    GEL_TextOut("--->>> 0x4000082C -> (%x)<<<---\n",,,,,*(int*)0x4000082C );
    
    GEL_TextOut("--->>> 0x40000840 -> (%x)<<<---\n",,,,,*(int*)0x40000840 );
    GEL_TextOut("--->>> 0x40000844 -> (%x)<<<---\n",,,,,*(int*)0x40000844 );
    GEL_TextOut("--->>> 0x40000848 -> (%x)<<<---\n",,,,,*(int*)0x40000848 );
    GEL_TextOut("--->>> 0x4000084C -> (%x)<<<---\n",,,,,*(int*)0x4000084C );
    
    GEL_TextOut("---<<<  Read MMU Cortex M4 RTOS >>>---\n");
}

hotmenu Set_MMU()
{
	GEL_TextOut("--->>> Set_MMU Cortex M4 RTOS<<<---\n");


    // Set virtual address
	*(int*)0x40000860 = 0x20000000;
    
    // Set physical adress
	*(int*)0x400008A0 = 0x55020000;
    
    // Enable the MMU
	*(int*)0x400008E0 = 0xF0001;

    // Set Virtual address TILER
	*(int*)0x40000800 = 0x60000000;
    // Set Virtual address EMIF 0x80000000 to 0x9FFFFFFF
	*(int*)0x40000804 = 0x80000000;
    // Set Virtual address L3_2 0xA0000000 to 0xBFFFFFFF
	*(int*)0x40000808 = 0xA0000000;
    // Set Virtual address L3_1 0x40000000 to 0x5FFFFFFF
	*(int*)0x4000080C = 0x40000000;

    // Set Physical address TILER
	*(int*)0x40000820 = 0x60000000;
    // Set Physical address EMIF 0x80000000 to 0x9FFFFFFF
	*(int*)0x40000824 = 0x80000000;
    // Set Physical address L3_2 0x40000000 to 0x5FFFFFFF
	*(int*)0x40000828 = 0xA0000000;
    // Set Physical address L3_1 0x00000000 to 0x1FFFFFFF
	*(int*)0x4000082C = 0x40000000;

    // Enable the MMU
	*(int*)0x40000840 = 0x00030003;
	*(int*)0x40000844 = 0x00030003;
	*(int*)0x40000848 = 0x00020003;
	*(int*)0x4000084C = 0x00020003;

	GEL_TextOut("---<<< Set_MMU Cortex M4 RTOS >>>---\n");
}


OnReset()
{ 
    GEL_TextOut( "Reset has occurred.\n\n" );
}

OnResetDetected()
{

    GEL_TextOut( "System Reset has occurred.\n\n" );
}

OnTargetConnect()
{    

    //Set_MMU();
} 
