/*******************************************************************/ 
/* This GEL file is loaded on the command line of Code Composer    */
/* The StartUp() function is called every time you start           */
/* Code Composer.  You can customize this function to              */
/* initialize wait states or to perform other initialization.      */
/*                                                                 */
/* OMAP5430 cortexA15 basic emulation 	    					   */
/*                                                                 */
/*                                                                 */
/*  Author: Salamito thomas				     					   */
/*******************************************************************/
menuitem "Basic Emulation"
/**********************************************************************
 *
 *  FUNCTIONS
 *
 **********************************************************************/
 
int G_Control = 0 ;

int address1 = 0;
int address2 = 0;

hotmenu load_asm_program_ddr1()
{   
	GEL_TextOut("Load asm program in ddr1 \n");
	*(int *)0x80000200 = 0xE1A00000;
	*(int *)0x80000204 = 0xE1A00000;
	*(int *)0x80000208 = 0xE1A00000;
	*(int *)0x8000020C = 0xE1A00000;
	*(int *)0x80000210 = 0xE1A00000;
	*(int *)0x80000214 = 0xE1A00000;
	*(int *)0x80000218 = 0xE1A00000;
	*(int *)0x8000021C = 0xE1A00000;
	*(int *)0x80000220 = 0xE1A00000;
	*(int *)0x80000224 = 0xEAFFFFF6;
    
    GEL_TextOut("Load asm program in ddr1 done \n");

	PC = 0x80000200;
}

hotmenu load_asm_program_ddr2()
{
	GEL_TextOut("Load asm program in ddr2 \n");
	*(int *)0x80000400 = 0xE1A00000;
	*(int *)0x80000404 = 0xE1A00000;
	*(int *)0x80000408 = 0xE1A00000;
	*(int *)0x8000040C = 0xE1A00000;
	*(int *)0x80000410 = 0xE1A00000;
	*(int *)0x80000414 = 0xE1A00000;
	*(int *)0x80000418 = 0xE1A00000;
	*(int *)0x8000041C = 0xE1A00000;
	*(int *)0x80000420 = 0xE1A00000;
	*(int *)0x80000424 = 0xEAFFFFF6;

	PC = 0x80000400;
    
    GEL_TextOut("Load asm program in ddr2 done \n");
}

hotmenu load_asm_program_psram1()
{
	GEL_TextOut("Load asm program in psram1 \n");
	*(int *)0x00000200 = 0xE1A00000;
	*(int *)0x00000204 = 0xE1A00000;
	*(int *)0x00000208 = 0xE1A00000;
	*(int *)0x0000020C = 0xE1A00000;
	*(int *)0x00000210 = 0xE1A00000;
	*(int *)0x00000214 = 0xE1A00000;
	*(int *)0x00000218 = 0xE1A00000;
	*(int *)0x0000021C = 0xE1A00000;
	*(int *)0x00000220 = 0xE1A00000;
	*(int *)0x00000224 = 0xEAFFFFF6;

	PC = 0x00000200;
    
    GEL_TextOut("Load asm program in psram1 done\n");
}

hotmenu load_asm_program_psram2()
{
	GEL_TextOut("Load asm program in psram2 \n");
	*(int *)0x00000400 = 0xE1A00000;
	*(int *)0x00000404 = 0xE1A00000;
	*(int *)0x00000408 = 0xE1A00000;
	*(int *)0x0000040C = 0xE1A00000;
	*(int *)0x00000410 = 0xE1A00000;
	*(int *)0x00000414 = 0xE1A00000;
	*(int *)0x00000418 = 0xE1A00000;
	*(int *)0x0000041C = 0xE1A00000;
	*(int *)0x00000420 = 0xE1A00000;
	*(int *)0x00000424 = 0xEAFFFFF6;

	PC = 0x00000400;
    
    GEL_TextOut("Load asm program in psram2 done \n");
}

hotmenu load_psram_program_ocmram1()
{
	GEL_TextOut("Load asm program in ocmram1 \n");
	*(int *)0x40300800 = 0xE1A00000;
	*(int *)0x40300804 = 0xE1A00000;
	*(int *)0x40300808 = 0xE1A00000;
	*(int *)0x4030080C = 0xE1A00000;
	*(int *)0x40300810 = 0xE1A00000;
	*(int *)0x40300814 = 0xE1A00000;
	*(int *)0x40300818 = 0xE1A00000;
	*(int *)0x4030081C = 0xE1A00000;
	*(int *)0x40300820 = 0xE1A00000;
	*(int *)0x40300824 = 0xEAFFFFF6;

	PC = 0x40300800;
    
    GEL_TextOut("Load asm program in ocmram1 done\n");
}

hotmenu load_asm_program_ocmram2()
{
	GEL_TextOut("Load asm program in ocmram2 \n");
	*(int *)0x40300A00 = 0xE1A00000;
	*(int *)0x40300A04 = 0xE1A00000;
	*(int *)0x40300A08 = 0xE1A00000;
	*(int *)0x40300A0C = 0xE1A00000;
	*(int *)0x40300A10 = 0xE1A00000;
	*(int *)0x40300A14 = 0xE1A00000;
	*(int *)0x40300A18 = 0xE1A00000;
	*(int *)0x40300A1C = 0xE1A00000;
	*(int *)0x40300A20 = 0xE1A00000;
	*(int *)0x40300A24 = 0xEAFFFFF6;

	PC = 0x40300A00;
    
    GEL_TextOut("Load asm program in ocmram2 done\n");
}

OnHalt() 
{   
    if (G_Control==1000)
    {
        GEL_TextOut("basic_asm_execution_control_SWbkpt %x %x\n ",,,,, address1, PC);      
        GEL_Run();
    }
    if (G_Control==1001)
    {
        GEL_TextOut("basic_asm_execution_control_HWbkpt %x %x\n",,,,, address2, PC);        
        GEL_TextOut("basic_asm_execution_control DONE !!!! \n");
        GEL_Run();
    }
    
    if (G_Control==1002)
    { 
        GEL_BreakPtReset(); // clears all SW bkpt.
	    GEL_HWBreakPtReset(); // clears all HW bkpt.
    }    
    G_Control++;  
}

hotmenu basic_asm_execution_control_ddr1()
{
    PC = 0x80000200;
    G_Control=1000;
    address1=0x80000210;
    address2=0x80000218;
	GEL_TextOut("basic_asm_execution_control \n");
    GEL_TextOut("TEST PERFORM ON DDR1 \n");
    
    GEL_BreakPtReset(); // clears all SW bkpt.
	GEL_HWBreakPtReset(); // clears all HW bkpt.
	GEL_BreakPtAdd(0x80000210);
    GEL_HWBreakPtAdd(0x80000218);
    
    GEL_Run();
     
}

hotmenu basic_asm_execution_control_ddr2()
{
    PC=0x80000400;
    G_Control=1000;
    address1=0x80000410;
    address2=0x80000418;
	GEL_TextOut("basic_asm_execution_control \n");
    GEL_TextOut("TEST PERFORM ON DDR2 \n");
    
	GEL_BreakPtReset(); // clears all SW bkpt.
	GEL_HWBreakPtReset(); // clears all HW bkpt.
	GEL_BreakPtAdd(0x80000410);
	GEL_HWBreakPtAdd(0x80000418);
	GEL_Run();
}


hotmenu basic_asm_execution_control_psram1()
{
    PC=0x00000200;
    G_Control=1000;
    address1=0x00000210;
    address2=0x00000218;
	GEL_TextOut("basic_asm_execution_control \n");
    GEL_TextOut("TEST PERFORM ON PSRAM1 \n");
	GEL_BreakPtReset(); // clears all SW bkpt.
	GEL_HWBreakPtReset(); // clears all HW bkpt.
	GEL_BreakPtAdd(0x00000210);
    GEL_HWBreakPtAdd(0x00000218);
	GEL_Run();
}

hotmenu basic_asm_execution_control_psram2()
{
    PC=0x00000400;
    G_Control=1000;
    address1=0x00000410;
    address2=0x00000418;
	GEL_TextOut("basic_asm_execution_control \n");
    GEL_TextOut("TEST PERFORM ON PSRAM2 \n");
	GEL_BreakPtReset(); // clears all SW bkpt.
	GEL_HWBreakPtReset(); // clears all HW bkpt.
	GEL_BreakPtAdd(0x00000410);
	GEL_HWBreakPtAdd(0x00000418);
	GEL_Run();
}

hotmenu basic_asm_execution_control_ocmram1()
{
    PC=0x40300800;
    G_Control=1000;
    address1=0x40300810;
    address2=0x40300818;
	GEL_TextOut("basic_asm_execution_control \n");
    GEL_TextOut("TEST PERFORM ON OCMRAM1 \n");
	GEL_BreakPtReset(); // clears all SW bkpt.
	GEL_HWBreakPtReset(); // clears all HW bkpt.
	GEL_BreakPtAdd(0x40300810);
	GEL_HWBreakPtAdd(0x40300818);
	GEL_Run();
}

hotmenu basic_asm_execution_control_ocmram2()
{
    PC=0x40300A00;
    G_Control=1000;
    address1=0x40300A10;
    address2=0x40300A18;
	GEL_TextOut("basic_asm_execution_control \n");
    GEL_TextOut("TEST PERFORM ON OCMRAM2 \n");
	GEL_BreakPtReset(); // clears all SW bkpt.
	GEL_HWBreakPtReset(); // clears all HW bkpt.
	GEL_BreakPtAdd(0x40300A10);
	GEL_HWBreakPtAdd(0x40300A18);
	GEL_Run();
}
