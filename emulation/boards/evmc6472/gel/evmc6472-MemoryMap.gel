/*--------------------------------------------------------------*/
/* TMS320C6472-MemoryMap.gel                                    */
/* Version 1.0                                                  */
/*                                                              */
/* This GEL file is designed to be used in conjunction with     */
/* CCS 3.3 and CC4.0 and the TMS320C6472 EVM.  It performs the  */
/* memory map setup from TMS320C6472.gel without executing the  */
/* PLL or EMIF initialization.  The GEL file should be used with*/ 
/* the secondary cores on a TMS320C6472 as only the primary     */
/* core should set up the PLL and EMIF.                         */
/*                                                              */
/*--------------------------------------------------------------*/

/*--------------------------------------------------------------*/
/* StartUp()                                                    */
/* This function is called each time CCS is started.            */
/* Customize this function to perform desired initialization.   */
/*--------------------------------------------------------------*/
StartUp()
{
    setup_memory_map();
}

#define DEVCTL	    0x02A80200  // Device Control Register
#define DEVSTAT	    0x02A80000  // Device Status Register

/*--------------------------------------------------------------*/
/* OnTargetConnect()                                            */
/* This function is called by CCS when you do Debug->Connect on */
/* CCS 3.X.                                                     */
/*--------------------------------------------------------------*/
OnTargetConnect()
{
    /*------------------------------------------------------*/
    /* GEL_Reset() is used to deal with the worst case      */
    /* senario of unknown target state.  If for some reason */
    /* a reset is not desired upon target connection,       */
    /* GEL_Reset() may be removed and replaced with         */
    /* something "less brutal" like a cache initialization  */
    /* function.                                            */
    /*------------------------------------------------------*/
    GEL_Reset();

    GEL_TextOut("GEL StartUp Complete.\n","2");
}

/*--------------------------------------------------------------*/
/* OnReset()                                                    */
/* This function is called by CCS when you do Debug->Resest.    */
/* The goal is to put the C6x into a known good state with      */
/* respect to cache, edma and interrupts.                       */
/*--------------------------------------------------------------*/
OnReset( int nErrorCode )
{
    init_emif();
}

/*--------------------------------------------------------------*/
/* OnPreFileLoaded()                                            */
/* This function is called automatically when the 'Load Program'*/
/* Menu item is selected.                                       */
/*--------------------------------------------------------------*/
OnPreFileLoaded()
{
    /*------------------------------------------------------*/
    /* GEL_Reset() is used to deal with the worst case      */
    /* senario of unknown target state.  If for some reason */
    /* a reset is not desired upon target connection,       */
    /* GEL_Reset() may be removed and replaced with         */
    /* something "less brutal" like a cache initialization  */
    /* function.                                            */
    /*------------------------------------------------------*/
    GEL_Reset();

    flush_cache();
    IER = 0;
    IFR = 0;
    init_emif();
}

/*--------------------------------------------------------------*/
/* OnRestart()                                                  */
/* This function is called by CCS when you do Debug->Restart.   */
/* The goal is to put the C6x into a known good state with      */
/* respect to cache, edma and interrupts.                       */
/* Failure to do this can cause problems when you restart and   */
/* run your application code multiple times.  This is different */
/* then OnPreFileLoaded() which will do a GEL_Reset() to get the*/
/* C6x into a known good state.                                 */
/*--------------------------------------------------------------*/
OnRestart( int nErrorCode )
{
    /*------------------------------------------------------*/
    /* Turn off L2 for DDR.  The app should           	    */
    /* manage these for coherency in the application.       */
    /*------------------------------------------------------*/
    GEL_TextOut("Turn off cache segment\n");
   
    GEL_MemoryFill(0x01848380, 0, 0x10, 0x0);

    /*------------------------------------------------------*/
    /* Disable EDMA events and interrupts and clear any     */
    /* pending events.                                      */
    /*------------------------------------------------------*/
    GEL_TextOut("Disable EDMA events\n");
    *(int*)0x02A0105C = 0xFFFFFFFF; // IECRH (disable high interrupts)
    *(int*)0x02A0102C = 0xFFFFFFFF; // EECRH (disable high events)
    *(int*)0x02A01074 = 0xFFFFFFFF; // ICRH (clear high interrupts)
    *(int*)0x02A0100C = 0xFFFFFFFF; // ECRH (clear high events)

    *(int*)0x02A01058 = 0xFFFFFFFF; // IECR  (disable low interrupts)
    *(int*)0x02A01028 = 0xFFFFFFFF; // EECR  (disable low events)
    *(int*)0x02A01070 = 0xFFFFFFFF; // ICR  (clear low interrupts)
    *(int*)0x02A01008 = 0xFFFFFFFF; // ECR (clear low events)

    /* Disable other interrupts */
    IER = 0;
    IFR = 0;
}

/*--------------------------------------------------------------*/
/* setup_memory_map()                                           */
/* Memory map setup                                             */
/*--------------------------------------------------------------*/
setup_memory_map()
{
    GEL_MapOn();
    GEL_MapReset();

    /* On-chip memory map */
	GEL_MapAdd(0x100000, 0, 0x8000, 1, 0);   /* ROM */

	GEL_MapAdd(0x200000, 0, 0x200000, 1, 1);  /* L2 */
	GEL_MapAdd(0x800000, 0, 0x200000, 1, 1);  /* L2 */
	GEL_MapAdd(0x10800000, 0, 0x200000, 1, 1);  /* L2 - Global addressing */
	GEL_MapAdd(0xE00000, 0, 0x008000, 1, 1);  /* L1P */
	GEL_MapAdd(0xF00000, 0, 0x008000, 1, 1);  /* L1D */
	GEL_MapAdd(0x10800000, 0, 0x200000, 1, 1);  /* L2-Global */

	GEL_MapAdd(0x1800000, 0, 0x10000, 1, 1);  /* Sys interrupt controller */
	GEL_MapAdd(0x1810000, 0, 0x01000, 1, 1);  /* Sys power down control   */
	GEL_MapAdd(0x1811000, 0, 0x01000, 1, 1);  /* Sys security ID	*/
	GEL_MapAdd(0x1812000, 0, 0x01000, 1, 1);  /* Sys revision ID	*/

	GEL_MapAdd(0x1820000, 0, 0x10000, 1, 1);  /* EMC registers	*/

	GEL_MapAdd(0x1840000, 0, 0x10000, 1, 1);  /* L1/L2 Control      */

	GEL_MapAdd(0x1BC0000, 0, 0x10000, 1, 1);  /* Emulation		*/
	GEL_MapAdd(0x1BD0000, 0, 0x10000, 1, 1);  /* PBIST			*/

	GEL_MapAdd(0x2500000, 0, 0x3FFFF, 1, 1);  /* TSIP0 control	*/
	GEL_MapAdd(0x2540000, 0, 0x3FFFF, 1, 1);  /* TSIP1 control	*/
	GEL_MapAdd(0x2580000, 0, 0x3FFFF, 1, 1);  /* TSIP2 control	*/

	GEL_MapAdd(0x25E0000, 0, 0x10000, 1, 1);  /* Timer 0 		*/
	GEL_MapAdd(0x25F0000, 0, 0x10000, 1, 1);  /* Timer 1		*/
	GEL_MapAdd(0x2600000, 0, 0x10000, 1, 1);  /* Timer 2		*/
	GEL_MapAdd(0x2610000, 0, 0x10000, 1, 1);  /* Timer 3		*/
	GEL_MapAdd(0x2620000, 0, 0x10000, 1, 1);  /* Timer 4		*/
	GEL_MapAdd(0x2630000, 0, 0x10000, 1, 1);  /* Timer 5		*/
	GEL_MapAdd(0x2640000, 0, 0x10000, 1, 1);  /* Timer 6		*/
	GEL_MapAdd(0x2650000, 0, 0x10000, 1, 1);  /* Timer 7		*/
	GEL_MapAdd(0x2660000, 0, 0x10000, 1, 1);  /* Timer 8		*/
	GEL_MapAdd(0x2670000, 0, 0x10000, 1, 1);  /* Timer 9		*/
	GEL_MapAdd(0x2680000, 0, 0x10000, 1, 1);  /* Timer 10		*/
	GEL_MapAdd(0x2690000, 0, 0x10000, 1, 1);  /* Timer 11		*/

	GEL_MapAdd(0x2880000, 0, 0x00080, 1, 1);  /* HPI control		*/

	GEL_MapAdd(0x29A0000, 0, 0x00200, 1, 1);  /* PLL 1			*/
	GEL_MapAdd(0x29C0000, 0, 0x00200, 1, 1);  /* PLL 2			*/
	GEL_MapAdd(0x29C0400, 0, 0x00200, 1, 1);  /* PLL 3			*/

	GEL_MapAdd(0x2A00000, 0, 0x08000, 1, 1);  /* EDMA3 TPCC		*/
	GEL_MapAdd(0x2A20000, 0, 0x08000, 1, 1);  /* EDMA3 TPTC0		*/
	GEL_MapAdd(0x2A28000, 0, 0x08000, 1, 1);  /* EDMA3 TPTC1		*/
	GEL_MapAdd(0x2A30000, 0, 0x08000, 1, 1);  /* EDMA3 TPTC2		*/
	GEL_MapAdd(0x2A38000, 0, 0x08000, 1, 1);  /* EDMA3 TPTC3		*/

	GEL_MapAdd(0x2A80000, 0, 0x20000, 1, 1);  /* chip level registers   */

	GEL_MapAdd(0x2AA8000, 0, 0x10000, 1, 1);  /* SMC      */

	GEL_MapAdd(0x2AB0000, 0, 0x8000, 1, 1);  /* Boot Controller      */
	GEL_MapAdd(0x2AB8000, 0, 0x10000, 1, 1);  /* SEC_CTL    */

	GEL_MapAdd(0x2AE0000, 0, 0x20000, 1, 1);  /* PSC: 			*/
	GEL_MapAdd(0x2B00000, 0, 0x00100, 1, 1);  /* GPIO		    */
	GEL_MapAdd(0x2B04000, 0, 0x00080, 1, 1);  /* I2C			*/
	GEL_MapAdd(0x2B40000, 0, 0x00200, 1, 1);  /* Utopia			*/
	GEL_MapAdd(0x2BC0000, 0, 0x100000, 1, 1);  /* Utopia-PIM-PDMA	*/
	GEL_MapAdd(0x2C20000, 0, 0x4000, 1, 1);  /* SMCP 0			*/
	GEL_MapAdd(0x2C24000, 0, 0x4000, 1, 1);  /* SMCP 1			*/
	GEL_MapAdd(0x2C28000, 0, 0x4000, 1, 1);  /* SMCP 2			*/
	GEL_MapAdd(0x2C2C000, 0, 0x4000, 1, 1);  /* SMCP 3			*/
	GEL_MapAdd(0x2C30000, 0, 0x4000, 1, 1);  /* SMCP 4			*/
	GEL_MapAdd(0x2C34000, 0, 0x4000, 1, 1);  /* SMCP 5			*/

	GEL_MapAdd(0x2C40000, 0, 0x1000, 1, 1);  /* ETB 0			*/
	GEL_MapAdd(0x2C41000, 0, 0x1000, 1, 1);  /* ETB 1			*/
	GEL_MapAdd(0x2C42000, 0, 0x1000, 1, 1);  /* ETB 2			*/
	GEL_MapAdd(0x2C43000, 0, 0x1000, 1, 1);  /* ETB 3			*/
	GEL_MapAdd(0x2C44000, 0, 0x1000, 1, 1);  /* ETB 4			*/
	GEL_MapAdd(0x2C45000, 0, 0x1000, 1, 1);  /* ETB 5			*/

	GEL_MapAdd(0x2C80000, 0, 0x01000, 1, 1);  /* EMAC 0			*/
	GEL_MapAdd(0x2C81000, 0, 0x00800, 1, 1);  /* EMAC wrapper		*/
	GEL_MapAdd(0x2C81800, 0, 0x00800, 1, 1);  /* MDIO			*/
	GEL_MapAdd(0x2C82000, 0, 0x04000, 1, 1);  /* EMAC CPPI		*/

	GEL_MapAdd(0x2CC0000, 0, 0x01000, 1, 1);  /* EMAC 1			*/
	GEL_MapAdd(0x2CC1000, 0, 0x0800, 1, 1);  /* EMIC 1			*/
	GEL_MapAdd(0x2CC2000, 0, 0x2000, 1, 1);  /* EMIC 1	CPPI		*/

	GEL_MapAdd(0x2D00000, 0, 0x40000, 1, 1);  /* Rapid IO		*/
	GEL_MapAdd(0x2E00000, 0, 0x04000, 1, 1);  /* Rapid IO CPPI	*/

	GEL_MapAdd(0x78000000, 0, 0x08000000, 1, 1); /* EMIF B DDR EMIF config */
	GEL_MapAdd(0xE0000000, 0, 0x10000000, 1, 1);  /* EMIF A CE0  DDR2 SDRAM  */
	GEL_MapAdd(0xF0000000, 0, 0x10000000, 1, 1);  /* EMIF A CE1  DDR2 SDRAM  */
	GEL_MapAdd(0x20850000, 0, 0x00800000, 1, 1);  /* EMIF A CE1  DDR2 SDRAM  */
}

/*--------------------------------------------------------------*/
/* clear_memory_map()                                           */
/* Memory map disable                                           */
/*--------------------------------------------------------------*/
clear_memory_map()
{
    GEL_MapOff();
}

/*--------------------------------------------------------------*/
/* flush_cache()                                                */
/* Flush L1 & L2 cache                                          */
/*--------------------------------------------------------------*/
flush_cache()
{
    /* Invalidate L1I and L1D */
    *(int*)0x01840000 = (*(int*)0x01840000 | 0x00000300);

    /* Clean L2 */
    *(int*)0x01845004 = 0x1;
}

/*--------------------------------------------------------------*/
/* init_emif()                                                  */
/* Empty for slaves                                             */
/*--------------------------------------------------------------*/
init_emif()
{
}

/*--------------------------------------------------------------*/
/* TMS320C6472 MENU                                             */
/*--------------------------------------------------------------*/
menuitem "TMS320C6472 Functions";

hotmenu Reset()
{
    GEL_Reset( );
}

/*--------------------------------------------------------------*/
/* RESET MENU                                                   */
/*--------------------------------------------------------------*/
menuitem "Resets";

hotmenu ClearBreakPts_Reset_EMIFset()
{
    GEL_BreakPtReset();
    GEL_Reset();
    init_emif();
}

hotmenu FlushCache()
{
    flush_cache();
}

/*--------------------------------------------------------------*/
/* MEMORY MAP MENU                                              */
/*--------------------------------------------------------------*/
menuitem "Memory Map";

hotmenu SetMemoryMap()
{
    setup_memory_map();
}

hotmenu ClearMemoryMap()
{
    clear_memory_map();
}

