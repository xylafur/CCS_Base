<?xml version="1.0" encoding="UTF-8"?><module id="MMCSD" HW_revision="" XML_version="1" description="MMC/SD Controller">
     <register id="MMCCTL" acronym="MMCCTL" page="2" offset="0X0000" width="16" description="MMC Control Register">
<bitfield id="_RESV_1" width="5" begin="15" end="11" resetval="0" description="Reserved" range="" rwaccess="N"/>
<bitfield id="PERMDX" width="1" begin="10" end="10" resetval="1" description="Endian Select enable when writing" range="" rwaccess="RW">
<bitenum id="LEND" value="0" token="LEND" description="Little Endian is selected"/>
<bitenum id="BEND" value="1" token="BEND" description="Big Endian is selected"/>
</bitfield>
<bitfield id="PERMDR" width="1" begin="9" end="9" resetval="1" description="Endian select Enable when reading" range="" rwaccess="RW">
<bitenum id="LEND" value="0" token="LEND" description="Little Endian is selected"/>
<bitenum id="BEND" value="1" token="BEND" description="Big Endian is selected"/>
</bitfield>
<bitfield id="_RESV_4" width="1" begin="8" end="8" resetval="0" description="Reserved" range="" rwaccess="N"/>
<bitfield id="DATEG" width="2" begin="7" end="6" resetval="0" description="DAT3 Edge Detection Select" range="" rwaccess="RW">
<bitenum id="DISABLE" value="0" token="DISABLE" description="DAT3 edge detection is disabled."/>
<bitenum id="R_EDGE" value="1" token="R_EDGE" description=" DAT3 rising edge detection is enabled."/>
<bitenum id="F_EDGE" value="2" token="F_EDGE" description="DAT3 falling edge detection is enabled."/>
<bitenum id="RF_EDGE" value="3" token="RF_EDGE" description="DAT3 both edge detection is enabled"/>
</bitfield>
<bitfield id="_RESV_6" width="3" begin="5" end="3" resetval="0" description="Reserved" range="" rwaccess="N"/>
<bitfield id="WIDTH" width="1" begin="2" end="2" resetval="0" description="Data Bus Width (in only MMC mode)" range="" rwaccess="RW">
<bitenum id="BIT1" value="0" token="BIT1" description=" Data bus has 1-bit, (only DAT0 is used)."/>
<bitenum id="BIT4" value="1" token="BIT4" description="Data Bus has 4-bit, (all DAT0-3 are used)"/>
</bitfield>
<bitfield id="CMDRST" width="1" begin="1" end="1" resetval="0" description="CMD Logic Reset" range="" rwaccess="RW">
<bitenum id="ENABLE" value="0" token="ENABLE" description="The CMD line portion is enabled"/>
<bitenum id="DISABLE" value="1" token="DISABLE" description="The CMD line portion is disabled and in reset state"/>
</bitfield>
<bitfield id="DATRST" width="1" begin="0" end="0" resetval="0" description="DAT Logic Reset" range="" rwaccess="RW">
<bitenum id="ENABLE" value="0" token="ENABLE" description="The DAT line portion is enabled"/>
<bitenum id="DISABLE" value="1" token="DISABLE" description="The DAT line portion is disabled and in reset state"/>
</bitfield>
</register>
     <register id="MMCCLK" acronym="MMCCLK" page="2" offset="0X0004" width="16" description="MMC Memory Clock Register">
<bitfield id="_RESV_1" width="7" begin="15" end="9" resetval="0" description="Reserved" range="" rwaccess="N"/>
<bitfield id="CLKEN" width="1" begin="8" end="8" resetval="0" description="CLK Enable" range="" rwaccess="RW">
<bitenum id="DISABLE" value="0" token="DISABLE" description="CLK pin is disabled and fixed L"/>
<bitenum id="ENABLE" value="1" token="ENABLE" description="CLK pin is enabled"/>
</bitfield>
<bitfield id="CLKRT" width="8" begin="7" end="0" resetval="255" description="Clock Pin Rate This indicates divider rate of the function clock MMC clock = function clock /2*(ClockRate + 1)" range="0-FFh" rwaccess="RW"/>
</register>
     <register id="MMCST0" acronym="MMCST0" page="2" offset="0X0008" width="16" description="MMC Status Register 0">
<bitfield id="_RESV_1" width="3" begin="15" end="13" resetval="0" description="Reserved" range="" rwaccess="N"/>
<bitfield id="TRNDNE" width="1" begin="12" end="12" resetval="0" description="Transfer Done" range="" rwaccess="R">
<bitenum id="CLEAR" value="0" token="CLEAR" description=" No data transfer done"/>
<bitenum id="SET" value="1" token="SET" description="Data transfer of specified length has been done"/>
</bitfield>
<bitfield id="DATED" width="1" begin="11" end="11" resetval="0" description="DAT3 Edge Detect, bit is cleared when read by CPU" range="" rwaccess="R">
<bitenum id="CLEAR" value="0" token="CLEAR" description="No DAT3 edge is detected"/>
<bitenum id="SET" value="1" token="SET" description="DAT3 edge has been detected"/>
</bitfield>
<bitfield id="DRRDY" width="1" begin="10" end="10" resetval="0" description="Data Receive Ready" range="" rwaccess="R">
<bitenum id="CLEAR" value="0" token="CLEAR" description="MMCDRR is not ready"/>
<bitenum id="SET" value="1" token="SET" description="MMCDRR is ready to be reading a newdata by CPU or DMA"/>
</bitfield>
<bitfield id="DXRDY" width="1" begin="9" end="9" resetval="1" description="Data Transmit Ready" range="" rwaccess="R">
<bitenum id="CLEAR" value="0" token="CLEAR" description="MMCDXR is not ready"/>
<bitenum id="SET" value="1" token="SET" description="MMCDXR is ready to be writing a new data by CPU or DMA  "/>
</bitfield>
<bitfield id="_RESV_6" width="1" begin="8" end="8" resetval="0" description="Reserved" range="" rwaccess="N"/>
<bitfield id="CRCRS" width="1" begin="7" end="7" resetval="0" description="CRC error (response)" range="" rwaccess="R">
<bitenum id="CLEAR" value="0" token="CLEAR" description="No CRC error is detected"/>
<bitenum id="SET" value="1" token="SET" description="CRC error has been detected  "/>
</bitfield>
<bitfield id="CRCRD" width="1" begin="6" end="6" resetval="0" description="CRC error (read data) " range="" rwaccess="R">
<bitenum id="CLEAR" value="0" token="CLEAR" description="No CRC error is detected"/>
<bitenum id="SET" value="1" token="SET" description="CRC error has been detected"/>
</bitfield>
<bitfield id="CRCWR" width="1" begin="5" end="5" resetval="0" description="CRC error (write data)" range="" rwaccess="R">
<bitenum id="CLEAR" value="0" token="CLEAR" description="No CRC error is detected"/>
<bitenum id="SET" value="1" token="SET" description="CRC error has been detected "/>
</bitfield>
<bitfield id="TOUTRS" width="1" begin="4" end="4" resetval="0" description="Time-Out (response)" range="" rwaccess="R">
<bitenum id="CLEAR" value="0" token="CLEAR" description="No time-out occurs"/>
<bitenum id="SET" value="1" token="SET" description="Time-out has occurred during waiting response "/>
</bitfield>
<bitfield id="TOUTRD" width="1" begin="3" end="3" resetval="0" description="Time-Out (read data) " range="" rwaccess="R">
<bitenum id="CLEAR" value="0" token="CLEAR" description="No time-out occurs"/>
<bitenum id="SET" value="1" token="SET" description="Time-out has occurred during waiting response "/>
</bitfield>
<bitfield id="RSPDNE" width="1" begin="2" end="2" resetval="0" description="Command / Response Done " range="" rwaccess="R">
<bitenum id="CLEAR" value="0" token="CLEAR" description="No Receiving response done"/>
<bitenum id="SET" value="1" token="SET" description="Response successfully has received or command has sent without response "/>
</bitfield>
<bitfield id="BSYDNE" width="1" begin="1" end="1" resetval="0" description="Busy Done " range="" rwaccess="R">
<bitenum id="CLEAR" value="0" token="CLEAR" description="No busy releasing done"/>
<bitenum id="SET" value="1" token="SET" description="Released from busy state or expected busy not detected"/>
</bitfield>
<bitfield id="DATDNE" width="1" begin="0" end="0" resetval="0" description="Data Done" range="" rwaccess="R">
<bitenum id="CLEAR" value="0" token="CLEAR" description="No data transfer done"/>
<bitenum id="SET" value="1" token="SET" description="Data transfer of specified length successfully done"/>
</bitfield>
</register>
     <register id="MMCST1" acronym="MMCST1" page="2" offset="0X000C" width="16" description="MMC Status Register 1">
<bitfield id="_RESV_1" width="9" begin="15" end="7" resetval="0" description="Reserved" range="" rwaccess="N"/>
<bitfield id="FIFOFUL" width="1" begin="6" end="6" resetval="0" description="FIFO is full " range="" rwaccess="R">
<bitenum id="CLEAR" value="0" token="CLEAR" description=" FIFO is not full"/>
<bitenum id="SET" value="1" token="SET" description="FIFO is full"/>
</bitfield>
<bitfield id="FIFOEMP" width="1" begin="5" end="5" resetval="0" description="FIFO contains no data " range="" rwaccess="R">
<bitenum id="CLEAR" value="0" token="CLEAR" description="FIFO is not empty"/>
<bitenum id="SET" value="1" token="SET" description="FIFO is empty"/>
</bitfield>
<bitfield id="DAT3ST" width="1" begin="4" end="4" resetval="0" description="DAT3 Status" range="" rwaccess="R">
<bitenum id="CLEAR" value="0" token="CLEAR" description="The status of DAT3 is L level"/>
<bitenum id="SET" value="1" token="SET" description="The status of DAT3 is H level"/>
</bitfield>
<bitfield id="DRFUL" width="1" begin="3" end="3" resetval="0" description="DRRDY Data receive full" range="" rwaccess="R">
<bitenum id="CLEAR" value="0" token="CLEAR" description="MMCDRR(data receive register) is not full"/>
<bitenum id="SET" value="1" token="SET" description="MMCDRR(data receive register) is full"/>
</bitfield>
<bitfield id="DXEMP" width="1" begin="2" end="2" resetval="0" description="DXRDY Data transmit empty" range="" rwaccess="R">
<bitenum id="CLEAR" value="0" token="CLEAR" description="MMCDXR(data transmit register) is not empty"/>
<bitenum id="SET" value="1" token="SET" description=" MMCDXR(data transmit register) is empty"/>
</bitfield>
<bitfield id="CLKSTP" width="1" begin="1" end="1" resetval="1" description="Clock Stop Status" range="" rwaccess="R">
<bitenum id="CLEAR" value="0" token="CLEAR" description="CLK is active"/>
<bitenum id="SET" value="1" token="SET" description="CLK is held L because of no sending data during CLKEN is 0, receive shift register is full, transmit shift register is empty"/>
</bitfield>
<bitfield id="BUSY" width="1" begin="0" end="0" resetval="0" description="Busy" range="" rwaccess="R">
<bitenum id="CLEAR" value="0" token="CLEAR" description="No busy signal is detected"/>
<bitenum id="SET" value="1" token="SET" description="Busy signal is detected after response with busy or during block write"/>
</bitfield>
</register>
     <register id="MMCIM" acronym="MMCIM" page="2" offset="0X0010" width="16" description="MMC Interrupt Mask Register">
<bitfield id="_RESV_1" width="3" begin="15" end="13" resetval="0" description="Reserved" range="" rwaccess="N"/>
<bitfield id="ETRNDNE" width="1" begin="12" end="12" resetval="0" description="TRNDNE permission bit" range="" rwaccess="RW">
<bitenum id="PROHIBIT" value="0" token="PROHIBIT" description="Prohibit"/>
<bitenum id="PERMIT" value="1" token="PERMIT" description="Permit"/>
</bitfield>
<bitfield id="EDATED" width="1" begin="11" end="11" resetval="0" description="DATED permission bit" range="" rwaccess="RW">
<bitenum id="PROHIBIT" value="0" token="PROHIBIT" description="Prohibit"/>
<bitenum id="PERMIT" value="1" token="PERMIT" description="Permit"/>
</bitfield>
<bitfield id="EDRRDY" width="1" begin="10" end="10" resetval="0" description="DRRDY permission bit" range="" rwaccess="RW">
<bitenum id="PROHIBIT" value="0" token="PROHIBIT" description="Prohibit"/>
<bitenum id="PERMIT" value="1" token="PERMIT" description="Permit"/>
</bitfield>
<bitfield id="EDXRDY" width="1" begin="9" end="9" resetval="0" description="DXRDY permission bit" range="" rwaccess="RW">
<bitenum id="PROHIBIT" value="0" token="PROHIBIT" description="Prohibit"/>
<bitenum id="PERMIT" value="1" token="PERMIT" description="Permit"/>
</bitfield>
<bitfield id="_RESV_6" width="1" begin="8" end="8" resetval="0" description="Reserved" range="" rwaccess="N">
<bitenum id="PROHIBIT" value="0" token="PROHIBIT" description="Prohibit"/>
<bitenum id="PERMIT" value="1" token="PERMIT" description="Permit"/>
</bitfield>
<bitfield id="ECRCRS" width="1" begin="7" end="7" resetval="0" description="CRCRS permission bit (response)" range="" rwaccess="RW">
<bitenum id="PROHIBIT" value="0" token="PROHIBIT" description="Prohibit"/>
<bitenum id="PERMIT" value="1" token="PERMIT" description="Permit"/>
</bitfield>
<bitfield id="ECRCRD" width="1" begin="6" end="6" resetval="0" description="CRCRD permission bit (read data)" range="" rwaccess="RW">
<bitenum id="PROHIBIT" value="0" token="PROHIBIT" description="Prohibit"/>
<bitenum id="PERMIT" value="1" token="PERMIT" description="Permit"/>
</bitfield>
<bitfield id="ECRCWR" width="1" begin="5" end="5" resetval="0" description="CRCWR permission bit (write data)" range="" rwaccess="RW">
<bitenum id="PROHIBIT" value="0" token="PROHIBIT" description="Prohibit"/>
<bitenum id="PERMIT" value="1" token="PERMIT" description="Permit"/>
</bitfield>
<bitfield id="ETOUTRS" width="1" begin="4" end="4" resetval="0" description="TOUTRS permission bit (response)" range="" rwaccess="RW">
<bitenum id="PROHIBIT" value="0" token="PROHIBIT" description="Prohibit"/>
<bitenum id="PERMIT" value="1" token="PERMIT" description="Permit"/>
</bitfield>
<bitfield id="ETOUTRD" width="1" begin="3" end="3" resetval="0" description="TOUTRD permission bit (read data)" range="" rwaccess="RW">
<bitenum id="PROHIBIT" value="0" token="PROHIBIT" description="Prohibit"/>
<bitenum id="PERMIT" value="1" token="PERMIT" description="Permit"/>
</bitfield>
<bitfield id="ERSPDNE" width="1" begin="2" end="2" resetval="0" description="RSPDNE permission bit" range="" rwaccess="RW">
<bitenum id="PROHIBIT" value="0" token="PROHIBIT" description="Prohibit"/>
<bitenum id="PERMIT" value="1" token="PERMIT" description="Permit"/>
</bitfield>
<bitfield id="EBSYDNE" width="1" begin="1" end="1" resetval="0" description="BSYDNE permission bit" range="" rwaccess="RW">
<bitenum id="PROHIBIT" value="0" token="PROHIBIT" description="Prohibit"/>
<bitenum id="PERMIT" value="1" token="PERMIT" description="Permit"/>
</bitfield>
<bitfield id="EDATDNE" width="1" begin="0" end="0" resetval="0" description="DATDNE permission bit" range="" rwaccess="RW">
<bitenum id="PROHIBIT" value="0" token="PROHIBIT" description="Prohibit"/>
<bitenum id="PERMIT" value="1" token="PERMIT" description="Permit"/>
</bitfield>
</register>
     <register id="MMCTOR" acronym="MMCTOR" page="2" offset="0X0014" width="16" description="MMC Response Time-out Register">
<bitfield id="TOD_23_16" width="8" begin="15" end="8" resetval="0" description="Upper 5 bit of Data TimeOut Register (in MMC and SPI Modes) Time-Out Count For Data Read (in MMC mode)    0x00000: no time-out    0x00001: 1 CLK clock    0x00002: 2 CLK clocks    ...    0x1FFFF: 2097151 CLK clocks Time-Out Count For Data Read (in SPI mode)    0x00000: no time-out    0x00001: 1 x 8 CLK clocks    0x00002: 2 x 8 CLK clocks    ...    0x1FFFFF: 2097151 x 8 CLK clocks" range="0-1Fh" rwaccess="RW"/>
<bitfield id="TOR" width="8" begin="7" end="0" resetval="0" description="Time-Out Count For Response In MMC mode   0000 0000: no time-out   0000 0001: 1 CLK clock   0000 0010: 2 CLK clocks     ...   1111 1111: 255 CLK clocks In SPI mode   0000 0000: no time-out   0000 0001: 1 x 8 CLK clock   0000 0010: 2 x 8 CLK clocks     ...   1111 1111: 255 x 8 CLK clocks" range="0-FFh" rwaccess="RW"/>
</register>
     <register id="MMCTOD" acronym="MMCTOD" page="2" offset="0X0018" width="16" description="MMC LSB Data Read Time-out Register">
<bitfield id="TOD_15_0" width="16" begin="15" end="0" resetval="0" description="Lower 16 bit of Data TimeOut Register Time-Out Count For Data Read (in MMC mode)    0x00000: no time-out    0x00001: 1 CLK clock    0x00002: 2 CLK clocks    ...    0x1FFFF: 2097151 CLK clocks Time-Out Count For Data Read (in SPI mode)    0x00000: no time-out    0x00001: 1 x 8 CLK clocks    0x00002: 2 x 8 CLK clocks    ...    0xFFFFFF: 2097151 x 8 CLK clocks" range="0-FFFFh" rwaccess="RW"/>
</register>
     <register id="MMCBLEN" acronym="MMCBLEN" page="2" offset="0X001C" width="16" description="Block Length  Register">
<bitfield id="_RESV_1" width="4" begin="15" end="12" resetval="0" description="Reserved" range="" rwaccess="N"/>
<bitfield id="BLEN" width="12" begin="11" end="0" resetval="512" description="Block Length velue, 0 is prohibited" range="1-FFFh" rwaccess="RW"/>
</register>
     <register id="MMCNBLK" acronym="MMCNBLK" page="2" offset="0X0020" width="16" description="MMC Number of Blocks Register">
<bitfield id="NBLK" width="16" begin="15" end="0" resetval="0" description="Number of Blocks Specifies the total number of blocks to be transferred.The value 0x0000 means infinite blocks" range="0-FFFFh" rwaccess="RW"/>
</register>
     <register id="MMCNBLC" acronym="MMCNBLC" page="2" offset="0X0024" width="16" description="MMC Number of Blocks Counter">
<bitfield id="NBLC" width="16" begin="15" end="0" resetval="65535" description="MMCNBLC is used in order to test the counter which operates with the value of MMCNBLK in a factory test or a chip evaluation Reading is possible in order to check the number of blocks to be transferred But Writing to this register is prohibited by User" range="0-FFFFh" rwaccess="RW"/>
</register>
     <register id="MMCDRR1" acronym="MMCDRR1" page="2" offset="0X0028" width="16" description="MMC Data Receive Register 1">
<bitfield id="DRR1" width="16" begin="15" end="0" resetval="0" description="This register is used for reading of receive data from card when block read  Register expects little endian formatting" range="0-FFFFh" rwaccess="RW"/>
</register>
     <register id="MMCDRR2" acronym="MMCDRR2" page="2" offset="0X0029" width="16" description="MMC Data Receive Register 2">
<bitfield id="DRR2" width="16" begin="15" end="0" resetval="0" description="This register is used for reading of receive data from card when block read  Register expects little endian formatting" range="0-FFFFh" rwaccess="RW"/>
</register>
     <register id="MMCDXR1" acronym="MMCDXR1" page="2" offset="0X002C" width="16" description="MMC Data Transmit Register 1">
<bitfield id="DXR1" width="16" begin="15" end="0" resetval="0" description="This register is used for writing of transmit data to card when block write  Register expects little endian formatting" range="0-FFFFh" rwaccess="RW"/>
</register>
     <register id="MMCDXR2" acronym="MMCDXR2" page="2" offset="0X002D" width="16" description="MMC Data Transmit Register 2">
<bitfield id="DXR2" width="16" begin="15" end="0" resetval="0" description="This register is used for writing of transmit data to card when block write  Register expects little endian formatting" range="0-FFFFh" rwaccess="RW"/>
</register>
     <register id="MMCCMD1" acronym="MMCCMD1" page="2" offset="0X0030" width="16" description="MMC Command Register0">
<bitfield id="DCLR" width="1" begin="15" end="15" resetval="0" description="Data Receive/Transmit Clear" range="" rwaccess="RW">
<bitenum id="NO" value="0" token="NO" description=" No clear"/>
<bitenum id="CLEAR" value="1" token="CLEAR" description="Clear"/>
</bitfield>
<bitfield id="INITCK" width="1" begin="14" end="14" resetval="0" description="Initialize Clock Before sending the command (specified in CMD), 80 cycles of dummy clock will be inserted. This is required for resetting a card after power-on" range="" rwaccess="RW">
<bitenum id="NO" value="0" token="NO" description=" No initialization clock"/>
<bitenum id="INIT" value="1" token="INIT" description="Initialization clock insertion"/>
</bitfield>
<bitfield id="WDATX" width="1" begin="13" end="13" resetval="0" description="With Data" range="" rwaccess="RW">
<bitenum id="NO" value="0" token="NO" description=" No data transfer"/>
<bitenum id="DATA" value="1" token="DATA" description="With data transfer"/>
</bitfield>
<bitfield id="STRMTP" width="1" begin="12" end="12" resetval="0" description="Stream Transfer" range="" rwaccess="RW">
<bitenum id="BLOCK" value="0" token="BLOCK" description=" Block data transfer"/>
<bitenum id="STREAM" value="1" token="STREAM" description=" Stream data transfer"/>
<bitenum id="NO" value="0" token="NO" description="When WDATX = 0"/>
</bitfield>
<bitfield id="DTRW" width="1" begin="11" end="11" resetval="0" description="Write" range="" rwaccess="RW">
<bitenum id="READ" value="0" token="READ" description=" Data read"/>
<bitenum id="WRITE" value="1" token="WRITE" description="Data write"/>
<bitenum id="NO" value="0" token="NO" description="When WDATX = 0"/>
</bitfield>
<bitfield id="RSPFMT" width="2" begin="10" end="9" resetval="0" description="Response Format" range="" rwaccess="RW">
<bitenum id="NORSP" value="0" token="NORSP" description=" No response"/>
<bitenum id="R1" value="1" token="R1" description="R1, R4, R5, or R6 response. 48 bits with CRC."/>
<bitenum id="R2" value="2" token="R2" description="R2 response. 136 bits with CRC."/>
<bitenum id="R3" value="3" token="R3" description="R3 response. 48 bits with no CRC."/>
</bitfield>
<bitfield id="BSYEXP" width="1" begin="8" end="8" resetval="0" description="Busy Expected" range="" rwaccess="RW">
<bitenum id="NO" value="0" token="NO" description="No busy signal expected"/>
<bitenum id="BUSY" value="1" token="BUSY" description="Busy signal expected or in case of transfer abort"/>
</bitfield>
<bitfield id="PPLEN" width="1" begin="7" end="7" resetval="0" description="Push Pull Enable" range="" rwaccess="RW">
<bitenum id="OD" value="0" token="OD" description="Push Pull Driver of CMD line is disable (Open drain)"/>
<bitenum id="PP" value="1" token="PP" description="Push Pull Driver of CMD line is enable"/>
</bitfield>
<bitfield id="_RESV_9" width="1" begin="6" end="6" resetval="0" description="Reserved" range="" rwaccess="N"/>
<bitfield id="CMD" width="6" begin="5" end="0" resetval="0" description="Command Index The command to be sent to the CMD line" range="0-3Fh" rwaccess="RW"/>
</register>
     <register id="MMCCMD2" acronym="MMCCMD2" page="2" offset="0X0031" width="16" description="MMC Command Register1">
<bitfield id="_RESV_1" width="15" begin="15" end="1" resetval="0" description="Reserved" range="" rwaccess="N"/>
<bitfield id="DMATRIG" width="1" begin="0" end="0" resetval="0" description="DMA transfer event generation enable" range="" rwaccess="RW">
<bitenum id="NO" value="0" token="NO" description="Do not generate DMA transfer event"/>
</bitfield>
</register>
     <register id="MMCARG1" acronym="MMCARG1" page="2" offset="0X0034" width="16" description="MMC Argument  Register">
<bitfield id="ARG1" width="16" begin="15" end="0" resetval="0" description="LSB of Argument Register" range="0-FFFFh" rwaccess="RW"/>
</register>
     <register id="MMCARG2" acronym="MMCARG2" page="2" offset="0X0035" width="16" description="MMC Argument  Register">
<bitfield id="ARG2" width="16" begin="15" end="0" resetval="0" description="MSB of Argument Register MMCARGHL is used for specifying the arguments to be sent with the command specified by MMCCMD. Writing to MMCCMD cause start event of sending operation, that is, MMCARG has to be set before writing to MMCCMD. The content of this register will be kept after transfer to the shift register. However, modification to MMCARG is not allowed during sending operation" range="0-FFFFh" rwaccess="RW"/>
</register>
     <register id="MMCRSP0" acronym="MMCRSP0" page="2" offset="0X0038" width="16" description="MMC Response Register 0 ">
<bitfield id="MMCRSP0" width="16" begin="15" end="0" resetval="0" description="MMC Response Register 0" range="0-FFFFh" rwaccess="RW"/>
</register>
     <register id="MMCRSP1" acronym="MMCRSP1" page="2" offset="0X0039" width="16" description="MMC Response Register 1">
<bitfield id="MMCRSP1" width="16" begin="15" end="0" resetval="0" description="MMC Response Register 1" range="0-FFFFh" rwaccess="RW"/>
</register>
     <register id="MMCRSP2" acronym="MMCRSP2" page="2" offset="0X003C" width="16" description="MMC Response Register 2 ">
<bitfield id="MMCRSP2" width="16" begin="15" end="0" resetval="0" description="MMC Response Register 2" range="" rwaccess="RW"/>
</register>
     <register id="MMCRSP3" acronym="MMCRSP3" page="2" offset="0X003D" width="16" description="MMC Response Register 3">
<bitfield id="MMCRSP3" width="16" begin="15" end="0" resetval="0" description="MMC Response Register 3" range="0-FFFFh" rwaccess="RW"/>
</register>
     <register id="MMCDRSP4" acronym="MMCDRSP4" page="2" offset="0X0040" width="16" description="MMC Response Register 4 ">
<bitfield id="MMCRSP4" width="16" begin="15" end="0" resetval="0" description="Response Register 4" range="0-FFFFh" rwaccess="RW"/>
</register>
     <register id="MMCRSP5" acronym="MMCRSP5" page="2" offset="0X0041" width="16" description="MMC Response Register 5 ">
<bitfield id="MMCRSP5" width="16" begin="15" end="0" resetval="0" description="Response Register 5" range="0-FFFFh" rwaccess="RW"/>
</register>
     <register id="MMCRSP6" acronym="MMCRSP6" page="2" offset="0X0044" width="16" description="MMC Response Register 6 ">
<bitfield id="MMCRSP6" width="16" begin="15" end="0" resetval="0" description="Response Register 6" range="0-FFFFh" rwaccess="RW"/>
</register>
     <register id="MMCRSP7" acronym="MMCRSP7" page="2" offset="0X0045" width="16" description="MMC Response Register 7 ">
<bitfield id="MMCRSP7" width="16" begin="15" end="0" resetval="0" description="Response Register 7" range="0-FFFFh" rwaccess="RW"/>
</register>
     <register id="MMCDRSP" acronym="MMCDRSP" page="2" offset="0X0048" width="16" description="MMC Data Response Register">
<bitfield id="_RESV_1" width="8" begin="15" end="8" resetval="0" description="Reserved" range="" rwaccess="N"/>
<bitfield id="DRSP" width="8" begin="7" end="0" resetval="0" description="Data Response During a write operation, the CRC status token is stored in this register" range="0-FFh" rwaccess="RW"/>
</register>
     <register id="MMCCIDX" acronym="MMCCIDX" page="2" offset="0X0050" width="16" description="MMC Command Index Register">
<bitfield id="_RESV_1" width="8" begin="15" end="8" resetval="0" description="Reserved" range="" rwaccess="N"/>
<bitfield id="STRT" width="1" begin="7" end="7" resetval="0" description="Start bit" range="" rwaccess="RW"/>
<bitfield id="XMIT" width="1" begin="6" end="6" resetval="0" description="Transmission bit" range="" rwaccess="RW"/>
<bitfield id="CIDX" width="6" begin="5" end="0" resetval="0" description="Command Index Command index, is stored when it is received in MMC mode" range="0-3Fh" rwaccess="RW"/>
</register>
     <register id="SDIOCTL" acronym="SDIOCTL" page="2" offset="0X0064" width="16" description="SDIO Control Register">
<bitfield id="_RESV_1" width="14" begin="15" end="2" resetval="10" description="Reserved" range="" rwaccess="N"/>
<bitfield id="RDWTCR" width="1" begin="1" end="1" resetval="0" description="Read Wait enable for CRC error If this bit is set, Read Wait operation automatically starts in case a CRC error is detected during multiple block read access, and while it is not the last block to be transferred. In this case, RDWTRQ (Read Wait request) is automatically set. To end the Read Wait operation, write 0 to RDWTRQ. (No need to clear RDWTCR)" range="" rwaccess="RW">
<bitenum id="DISABLE" value="0" token="DISABLE" description="Read Wait is disabled"/>
<bitenum id="ENABLE" value="1" token="ENABLE" description="Automatically start read wait on CRC error"/>
</bitfield>
<bitfield id="RDWTRQ" width="1" begin="0" end="0" resetval="0" description="Read Wait request 0: End Read Wait operation and release DAT[2] 1: Set a Read Wait request. If this bit is set, Read Wait operation starts 2 clocks after the end of the read data block. MMCIF asserts low level on DAT[2] until this bit is cleared" range="" rwaccess="RW">
<bitenum id="DISABLE" value="0" token="DISABLE" description="no read wait requested"/>
<bitenum id="ENABLE" value="1" token="ENABLE" description="request read wait"/>
</bitfield>
</register>
     <register id="SDIOST0" acronym="SDIOST0" page="2" offset="0X0068" width="16" description="SDIO Status Register 0">
<bitfield id="_RESV_1" width="13" begin="15" end="3" resetval="0" description="Reserved" range="" rwaccess="N"/>
<bitfield id="RDWTST" width="1" begin="2" end="2" resetval="0" description="Read Wait status RDWTST becomes 1 during Read Wait operation" range="" rwaccess="R">
<bitenum id="INACTIVE" value="0" token="INACTIVE" description="Read Wait operation not in progress"/>
<bitenum id="ACTIVE" value="1" token="ACTIVE" description="Read wait operation in progress"/>
</bitfield>
<bitfield id="INTPRD" width="1" begin="1" end="1" resetval="0" description="Interrupt period INTPRD becomes 1 during Interrupt period" range="" rwaccess="R">
<bitenum id="CLEAR" value="0" token="CLEAR" description="Interrupt not in porgress"/>
<bitenum id="INTERRUPT" value="1" token="INTERRUPT" description="Interrupt in progress"/>
</bitfield>
<bitfield id="DAT1" width="1" begin="0" end="0" resetval="1" description="DAT[1] status DAT[1] can be monitored through this bit" range="" rwaccess="R">
<bitenum id="LOW" value="0" token="LOW" description="Logic low level on the SD_DATA1 pin"/>
<bitenum id="HIGH" value="1" token="HIGH" description="Logic high level on the SD_DATA1 pin"/>
</bitfield>
</register>
     <register id="SDIOIEN" acronym="SDIOIEN" page="2" offset="0X006C" width="16" description="SDIO Interrupt Enable Register">
<bitfield id="_RESV_1" width="14" begin="15" end="2" resetval="0" description="Reserved" range="" rwaccess="N"/>
<bitfield id="RWSEN" width="1" begin="1" end="1" resetval="0" description="Read Wait interrupt enable" range="" rwaccess="RW">
<bitenum id="DISABLE" value="0" token="DISABLE" description="Read  Wait interrupt is disabled"/>
<bitenum id="ENABLE" value="1" token="ENABLE" description="Read  Wait interrupt is enabled"/>
</bitfield>
<bitfield id="IOINTEN" width="1" begin="0" end="0" resetval="0" description="SDIO card interrupt enable" range="" rwaccess="RW">
<bitenum id="DISABLE" value="0" token="DISABLE" description="SDIO interrupt is disabled"/>
<bitenum id="ENABLE" value="1" token="ENABLE" description="SDIO interrupt is enabled"/>
</bitfield>
</register>
     <register id="SDIOIST" acronym="SDIOIST" page="2" offset="0X0070" width="16" description="SDIO Interrupt Status Register">
<bitfield id="_RESV_1" width="14" begin="15" end="2" resetval="0" description="Reserved" range="" rwaccess="N"/>
<bitfield id="RWS" width="1" begin="1" end="1" resetval="0" description="Read Wait interrupt status  This bit is set to 1 when Read Wait operation starts and Read Wait interrupt is enabled. To clear this bit, write 1" range="" rwaccess="RW">
<bitenum id="CLEAR" value="0" token="CLEAR" description="No Read Wait interrupt occurred"/>
<bitenum id="SET" value="1" token="SET" description="Read Wait interrupt occurred"/>
</bitfield>
<bitfield id="IOINT" width="1" begin="0" end="0" resetval="0" description="SDIO card interrupt status  This bit is set to 1 if the SDIO card interrupt is detected and card interrupt is enabled. To clear this bit, write 1 after the interrupt on the DAT[1] line is removed" range="" rwaccess="RW">
<bitenum id="CLEAR" value="0" token="CLEAR" description="No SDIO card interrupt occurred"/>
<bitenum id="SET" value="1" token="SET" description="SDIO card interrupt occurred"/>
</bitfield>
</register>
     <register id="MMCFIFOCTL" acronym="MMCFIFOCTL" page="2" offset="0X0074" width="16" description="FIFO Control Register">
<bitfield id="_RESV_1" width="11" begin="15" end="5" resetval="0" description="Reserved" range="" rwaccess="N"/>
<bitfield id="ACCWD" width="2" begin="4" end="3" resetval="0" description="Access Width (Used by FIFO control to determine full/empty flag)" range="" rwaccess="RW">
<bitenum id="4BYTES" value="0" token="4BYTES" description="CPU/DMA access width of 4 bytes"/>
<bitenum id="3BYTES" value="1" token="3BYTES" description="CPU/DMA access width of 3 bytes"/>
<bitenum id="2BYTES" value="2" token="2BYTES" description="CPU/DMA access width of 2 bytes"/>
<bitenum id="1BYTE" value="3" token="1BYTE" description="CPU/DMA access width of 1 byte"/>
</bitfield>
<bitfield id="FIFOLEV" width="1" begin="2" end="2" resetval="0" description="Sets the threshold level which is used to determine when DMA request and FIFO threshold interrupt are triggered" range="" rwaccess="RW">
<bitenum id="128BIT" value="0" token="128BIT" description="DMA Request every 128 bit sent/received"/>
<bitenum id="256BIT" value="1" token="256BIT" description="DMA Request every 256 bit sent/received"/>
</bitfield>
<bitfield id="FIFODIR" width="1" begin="1" end="1" resetval="0" description="Determines if the FIFO is being written to or read from" range="" rwaccess="RW">
<bitenum id="READ" value="0" token="READ" description="Read from FIFO"/>
<bitenum id="WRITE" value="1" token="WRITE" description="Write to FIFO"/>
</bitfield>
<bitfield id="FIFORST" width="1" begin="0" end="0" resetval="0" description="Reset the internal state of the FIFO" range="" rwaccess="RW">
<bitenum id="RESET" value="1" token="RESET" description="Reset FIFO"/>
</bitfield>
</register>
</module>
